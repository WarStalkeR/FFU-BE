using RST;
using HarmonyLib;
using UnityEngine;

namespace FFU_Bleeding_Edge {
	public class FFU_BE_Prefab_Weapons {
		public static float prjSpeedRocketBasic = 4f;
		public static float prjSpeedRocketNormal = 5f;
		public static float prjSpeedRocketFast = 6f;
		public static float prjSpeedRocketUltra = 12f;
		public static float prjSpeedAutocannonNormal = 17f;
		public static float prjSpeedAutocannonFast = 19f;
		public static float prjSpeedAutocannonGauss = 21f;
		public static float prjSpeedHowitzerNormal = 14f;
		public static float prjSpeedHowitzerFast = 17f;
		public static float prjSpeedRailgun = 23f;
		public static float prjSpeedRailcannon = 25f;
		public static float reloadProjRocket = 75f;
		public static float reloadProjAutocannon = 45f;
		public static float reloadProjHowitzer = 60f;
		public static float reloadProjRailgun = 45f;
		public static float reloadProjRailcannon = 60f;
		public static float reloadBeamLaser = 35f;
		public static float reloadBeamEnergy = 45f;
		public static float reloadBeamHeatRay = 55f;
		public static float reloadBeamDisruptor = 50f;
		public static float reloadBeamExoticRay = 60f;
		public static int SortModules(string moduleName) {
			int idx = 0;
			//Rockets
			if (moduleName == "weapon DIY Rockets x1") return idx; idx++;
			if (moduleName == "weapon ratmissile x2") return idx; idx++;
			if (moduleName == "weapon ratmissile x3") return idx; idx++;
			if (moduleName == "weapon miscmissile x4") return idx; idx++;
			if (moduleName == "weapon emperormissile large x5") return idx; idx++;
			if (moduleName == "weapon emperormissiles small x2") return idx; idx++;
			if (moduleName == "weapon tigermissile x2") return idx; idx++;
			if (moduleName == "weapon alienmissile x5") return idx; idx++;
			if (moduleName == "weapon alienmissile x7") return idx; idx++;
			if (moduleName == "weapon spideraamissilex3") return idx; idx++;
			if (moduleName == "weapon spideraamissilex4") return idx; idx++;
			if (moduleName == "weapon monolith missile x1") return idx; idx++;
			if (moduleName == "weapon ancientrockets x3") return idx; idx++;
			if (moduleName == "weapon tigermissile large") return idx; idx++;
			//Autocannons
			if (moduleName == "weapon DIY Minicannon ancient 2,3") return idx; idx++;
			if (moduleName == "weapon gatling 01 ancient dual 14,4") return idx; idx++;
			if (moduleName == "weapon gatling 02 rat small 12,4") return idx; idx++;
			if (moduleName == "weapon gatling RatA 14,4") return idx; idx++;
			if (moduleName == "weapon gatling RatB 15,5") return idx; idx++;
			if (moduleName == "weapon gatling whiteA 13,4") return idx; idx++;
			if (moduleName == "weapon gatling whiteB 14,5") return idx; idx++;
			if (moduleName == "weapon Sniper cannon 4") return idx; idx++;
			if (moduleName == "weapon gatling ClawA 12,4") return idx; idx++;
			if (moduleName == "weapon gatling ClawB 14,5") return idx; idx++;
			if (moduleName == "weapon gatling blaster small 12,5") return idx; idx++;
			if (moduleName == "weapon gatling Insectoid plasma 18,4x2") return idx; idx++;
			if (moduleName == "weapon gatling Insectoid cyano 15,4") return idx; idx++;
			//Howitzers
			if (moduleName == "weapon ATK-MK1 old") return idx; idx++;
			if (moduleName == "weapon ATK-MK2 old") return idx; idx++;
			if (moduleName == "weapon ATK-MK3 old") return idx; idx++;
			if (moduleName == "weapon ATK-MK1") return idx; idx++;
			if (moduleName == "weapon ATK-MK2") return idx; idx++;
			if (moduleName == "weapon ATK-MK3") return idx; idx++;
			if (moduleName == "weapon cubecannon huge old") return idx; idx++;
			if (moduleName == "weapon cubecannon huge") return idx; idx++;
			if (moduleName == "weapon emperorbanks cannon1x") return idx; idx++;
			if (moduleName == "weapon emperorbanks cannon2x") return idx; idx++;
			if (moduleName == "weapon emperorbanks cannon large") return idx; idx++;
			if (moduleName == "weapon ratcannon high velocity") return idx; idx++;
			if (moduleName == "weapon ratcannon fire1") return idx; idx++;
			if (moduleName == "weapon ratcannon fire2") return idx; idx++;
			if (moduleName == "weapon ratcannon fire3") return idx; idx++;
			if (moduleName == "weapon diyfirebomber1") return idx; idx++;
			if (moduleName == "weapon diyfirebomber2") return idx; idx++;
			if (moduleName == "weapon Energy cannon x1") return idx; idx++;
			if (moduleName == "weapon Energy cannon x2") return idx; idx++;
			if (moduleName == "weapon Energy cannon OP") return idx; idx++;
			if (moduleName == "weapon EMP energyball") return idx; idx++;
			if (moduleName == "weapon EMP energyball 3x Tiger") return idx; idx++;
			if (moduleName == "weapon Floral cannon") return idx; idx++;
			if (moduleName == "weapon exoticscannon1") return idx; idx++;
			//Railguns
			if (moduleName == "weapon Sniper cannon 0 DIY") return idx; idx++;
			if (moduleName == "weapon Sniper cannon 0") return idx; idx++;
			if (moduleName == "weapon Sniper cannon 2") return idx; idx++;
			if (moduleName == "weapon Sniper cannon 3") return idx; idx++;
			if (moduleName == "weapon Sniper cannon 2 insectoid") return idx; idx++;
			if (moduleName == "weapon sniper cannon EMP") return idx; idx++;
			if (moduleName == "weapon Spideraa shuriken") return idx; idx++;
			//Railcannons
			if (moduleName == "weapon cubecannon1") return idx; idx++;
			if (moduleName == "weapon cubecannon1x3") return idx; idx++;
			if (moduleName == "weapon Segmented cannon1") return idx; idx++;
			if (moduleName == "weapon Segmented cannonx2 A") return idx; idx++;
			if (moduleName == "weapon Segmented cannonx2 B") return idx; idx++;
			if (moduleName == "weapon Segmented cannonx2 C") return idx; idx++;
			if (moduleName == "weapon gatling Tiger") return idx; idx++;
			//Lasers
			if (moduleName == "weapon mininglaser 0 old") return idx; idx++;
			if (moduleName == "weapon mininglaser 0 defective") return idx; idx++;
			if (moduleName == "weapon mininglaser 2 defective") return idx; idx++;
			if (moduleName == "weapon mininglaser 3 defective") return idx; idx++;
			if (moduleName == "weapon mininglaser 4 defective") return idx; idx++;
			if (moduleName == "weapon mininglaser 1") return idx; idx++;
			if (moduleName == "weapon mininglaser 2") return idx; idx++;
			if (moduleName == "weapon mininglaser 3") return idx; idx++;
			if (moduleName == "weapon mininglaser 4") return idx; idx++;
			if (moduleName == "weapon mininglaser 5") return idx; idx++;
			if (moduleName == "weapon mininglaser 6") return idx; idx++;
			if (moduleName == "weapon ratlaser 5") return idx; idx++;
			if (moduleName == "weapon ratlaser small no armor") return idx; idx++;
			if (moduleName == "weapon ratlaser small with armor") return idx; idx++;
			if (moduleName == "weapon emperor minilaser") return idx; idx++;
			if (moduleName == "weapon emperor laser double") return idx; idx++;
			if (moduleName == "weapon emperor laser large") return idx; idx++;
			if (moduleName == "weapon Insectoid old fast laser") return idx; idx++;
			if (moduleName == "weapon Insectoid old fast laser 5x") return idx; idx++;
			//Beams
			if (moduleName == "weapon DIY Laser") return idx; idx++;
			if (moduleName == "weapon DIY raygun") return idx; idx++;
			if (moduleName == "weapon bigbeamer1") return idx; idx++;
			if (moduleName == "weapon bigbeamer2") return idx; idx++;
			if (moduleName == "weapon bigbeamer3") return idx; idx++;
			if (moduleName == "weapon ratlaser short") return idx; idx++;
			if (moduleName == "weapon ratlaser long") return idx; idx++;
			if (moduleName == "weapon tigerlaser MK1") return idx; idx++;
			if (moduleName == "weapon tigerlaser MK2") return idx; idx++;
			if (moduleName == "weapon powerbeam-MK1") return idx; idx++;
			if (moduleName == "weapon powerbeam-MK2") return idx; idx++;
			if (moduleName == "weapon powerbeam-MK3") return idx; idx++;
			if (moduleName == "weapon spideraa triplelaser") return idx; idx++;
			if (moduleName == "weapon spideraa quadlaser") return idx; idx++;
			if (moduleName == "weapon insectoid fast laser") return idx; idx++;
			if (moduleName == "weapon Insectoid slowlaser") return idx; idx++;
			//Heat Rays
			if (moduleName == "weapon DIY raygun orange") return idx; idx++;
			if (moduleName == "weapon Heatray emitter") return idx; idx++;
			if (moduleName == "weapon Heatray emitter x red") return idx; idx++;
			if (moduleName == "weapon Squid beamer heatray") return idx; idx++;
			//Disruptors
			if (moduleName == "weapon DIY raygun blue") return idx; idx++;
			if (moduleName == "weapon DIY EMP") return idx; idx++;
			if (moduleName == "weapon dual EMP") return idx; idx++;
			if (moduleName == "weapon DIY exotics EMP sniper") return idx; idx++;
			if (moduleName == "weapon Insectoid shield disruptor") return idx; idx++;
			if (moduleName == "weapon spideraa disruptor") return idx; idx++;
			if (moduleName == "weapon Squid beamer EMP") return idx; idx++;
			if (moduleName == "weapon rare warp shield breaker EMP") return idx; idx++;
			//Exotic Rays
			if (moduleName == "weapon DIY exoticslaser") return idx; idx++;
			if (moduleName == "weapon DIY exoticslaser dual") return idx; idx++;
			if (moduleName == "weapon Florallaser") return idx; idx++;
			if (moduleName == "weapon Squid beamer single") return idx; idx++;
			if (moduleName == "weapon Squid beamer double") return idx; idx++;
			if (moduleName == "weapon Squid warp ray effector") return idx; idx++;
			if (moduleName == "weapon rarelaserblue1") return idx; idx++;
			if (moduleName == "weapon rarelaserblue2") return idx; idx++;
			if (moduleName == "weapon rarelaserblue2 dual") return idx; idx++;
			if (moduleName == "weapon spideraa laser") return idx; idx++;
			if (moduleName == "weapon BFGx9 for bluestar") return idx; idx++;
			if (moduleName == "weapon rarelasergothic small") return idx; idx++;
			if (moduleName == "weapon rarelasergothic") return idx; idx++;
			return idx + 100;
		}
		public static void UpdateWeaponModule(ShipModule shipModule, bool initItemData) {
			string colorRocketLan = "ff0000";
			string colorExplosive = "ffc000";
			string colorKinetic = "add8e6";
			string colorPlasma = "0080ff";
			string colorIncendiary = "ff8040";
			string colorChemical = "008000";
			string colorExotical = "8060ff";
			string colorLaserEmt = "ffff60";
			string colorBeamEmt = "ff9060";
			string colorHeatRay = "ff6060";
			string colorEnergyRay = "0090ff";
			string colorExoticRay = "9060ff";
			shipModule.Weapon.resourcesPerShot = new ResourceValueGroup();
			int shipModule_maxHealth = AccessTools.FieldRefAccess<ShipModule, int>(shipModule, "maxHealth");
			int shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = shipModule.Weapon.ProjectileOrBeamPrefab as Projectile != null ? AccessTools.FieldRefAccess<Projectile, int>(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile, "pointDefPriority") : 0;
			var refModuleName = string.Empty;
			if (!initItemData) refModuleName = FFU_BE_Defs.prefabModdedModulesList.Find(x => x.PrefabId == shipModule.PrefabId)?.name;
			if (string.IsNullOrEmpty(refModuleName)) refModuleName = Core.GetOriginalName(shipModule.name);
			switch (refModuleName) {
				case "weapon DIY Rockets x1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Rust Jigsaw <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "Improvised makeshift rocket platform. Prints and launches rockets of exactly same awful quality as itself. Rockets have high impact effect, but lack guidance system completely.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 50f, metals = 350f, synthetics = 250f, exotics = 1f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 1f, metals = 2f, explosives = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.10f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketBasic;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket + 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 1.50f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 20;
				break;
				case "weapon ratmissile x2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Dual Tundra <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "Rocket platform of questionable quality developed by Rat Empire. Prints and launches low-yield incendiary rockets that lack proper guidance system. Still better then nothing.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 150f, metals = 500f, synthetics = 375f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 1f, metals = 1f, explosives = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketBasic;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 1.25f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 30;
				break;
				case "weapon ratmissile x3":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Triple Tundra <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "Rocket platform of questionable quality developed by Rat Empire. Prints and launches low-yield incendiary rockets that lack proper guidance system. Still better then nothing.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 750f, synthetics = 500f, exotics = 3f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 2f, metals = 2f, explosives = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketBasic;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 1.25f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 30;
				break;
				case "weapon miscmissile x4":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Wild Rage <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "Rocket platform of questionable quality developed by unknown party. Prints and launches low-yield explosive rockets that lack proper guidance system. Mostly used by pirates, slavers and other misfits.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 300f, metals = 850f, synthetics = 600f, exotics = 3f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 3f, metals = 3f, explosives = 11f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketBasic;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 1.25f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 30;
				break;
				case "weapon emperormissile large x5":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Rapid Mirage <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "Commercial rocket platform that prints and launches fragile, rapid-firing rockets. Used to propel light unguided reactive projectiles at enemies of the corporation that breached unsigned copyright agreements.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 400f, metals = 1000f, synthetics = 750f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 5f, metals = 5f, explosives = 15f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketFast;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 5;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 40;
				break;
				case "weapon emperormissiles small x2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Heavy Mirage <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "Commercial rocket platform that prints and launches lightly armored rockets. Used to propel armored unguided reactive projectiles at enemies of the corporation that breached unsigned copyright agreements.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 400f, metals = 1000f, synthetics = 750f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 3f, metals = 3f, explosives = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.10f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 2;
				shipModule.Weapon.shotInterval = 1.25f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 40;
				break;
				case "weapon tigermissile x2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Micro-Seismic <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "Initially this rocket platform was designed for deep core mining operations, but its micro-seismic charges are just as good at shattering everything else, as at shattering asteroids.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 1250f, synthetics = 1000f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 2f, metals = 4f, explosives = 14f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 3;
				shipModule.Weapon.shotInterval = 1.00f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 40;
				break;
				case "weapon alienmissile x5":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Swarm Wave <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "Great rapid-fire rocket platform with extraterrestrial aesthetic design. Prints and launches lightly armored explosive rockets. Uses well known, but greatly optimized built-in rocket printing mechanism..";
				shipModule.craftCost = new ResourceValueGroup { fuel = 600f, metals = 1400f, synthetics = 1100f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 2f, metals = 3f, explosives = 12f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.15f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 2;
				shipModule.Weapon.shotInterval = 0.60f;
				shipModule.Weapon.magazineSize = 5;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 40;
				break;
				case "weapon alienmissile x7":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Swarm Tide <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "Advanced rapid-fire rocket platform with extraterrestrial aesthetic design. Prints and launches lightly armored explosive rockets. Uses well known, but completely reworked built-in rocket printing mechanism.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 700f, metals = 1600f, synthetics = 1200f, exotics = 6f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 2f, metals = 4f, explosives = 15f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.15f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 2;
				shipModule.Weapon.shotInterval = 0.60f;
				shipModule.Weapon.magazineSize = 7;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 40;
				break;
				case "weapon spideraamissilex3":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Triple Ravager <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "A rocket platform of unknown origin that prints and launches armored biomechanical rockets. Built-in rocket printing mechanism uses unknown technology and encrypted designs.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 800f, metals = 1800f, synthetics = 1300f, exotics = 7f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 6f, fuel = 3f, metals = 5f, explosives = 18f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.40f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 3;
				shipModule.Weapon.shotInterval = 0.75f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 50;
				break;
				case "weapon spideraamissilex4":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Quad Ravager <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "A rocket platform of unknown origin that prints and launches armored biomechanical rockets. Built-in rocket printing mechanism uses unknown technology and encrypted designs.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 900f, metals = 2250f, synthetics = 1500f, exotics = 7f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 8f, fuel = 4f, metals = 6f, explosives = 24f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.40f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 3;
				shipModule.Weapon.shotInterval = 0.75f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 50;
				break;
				case "weapon monolith missile x1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Sub-Impactor <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "This platform of unknown origin prints super-solid metal monoliths with high-velocity rocket engines. The massive projectiles deal mostly kinetic damage and can't be deflected.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 2000f, synthetics = 1500f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 8f, metals = 16f, explosives = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 20;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 5;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketUltra;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 1.25f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 30;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 35;
				break;
				case "weapon ancientrockets x3":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Retaliator <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "Ancient exotic rocket battery. Prints and launches armored and dangerous miniature nuclear rockets that detonate on impact with all nuclear consequences. Held in high regard even to these days.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 2750f, synthetics = 1750f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, synthetics = 3f, explosives = 9f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketFast;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.50f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 35;
				break;
				case "weapon tigermissile large":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Launchers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Launchers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Annihilator <color=#" + colorRocketLan + "ff>Rocket</color> Launcher";
				shipModule.description = "Extremely powerful exotic rocket battery. Prints and launches heavily armored, but just as agile antimatter rockets that cause extreme structural, anti-personnel, modular and electromagnetic damage at point of impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1500f, metals = 3500f, synthetics = 2500f, exotics = 15f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 5f, synthetics = 5f, explosives = 9f, exotics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 16;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 16;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 8;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketFast;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 8;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 60;
				break;
				case "weapon DIY Minicannon ancient 2,3":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1);
				if (!FFU_BE_Defs.weaponTypeIDs["Autocannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Autocannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = "Dead Weight <color=#" + colorExplosive + "ff>Explosive</color> Autocannon";
				shipModule.description = "Improvised autocannon that was assembled from weapon spare parts according to ancient designs. Long reload, mediocre rate of fire and low accuracy make this weapon less then desirable.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 25f, metals = 125f, synthetics = 75f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 1f, explosives = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.40f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon + 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.30f;
				shipModule.Weapon.magazineSize = 6;
				shipModule.Weapon.accuracy = 13;
				shipModule.powerConsumed = 0;
				shipModule_maxHealth = 20;
				break;
				case "weapon gatling 01 ancient dual 14,4":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs["Autocannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Autocannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = "Old Enforcer <color=#" + colorExplosive + "ff>Explosive</color> Autocannon";
				shipModule.description = "Ancient autocannon that was designed centuries ago and served as loyal companion in many battles through the history. Has improved rate of fire, but still troubled with long reload and low accuracy.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 50f, metals = 200f, synthetics = 125f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 1f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.40f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon + 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.25f;
				shipModule.Weapon.magazineSize = 8;
				shipModule.Weapon.accuracy = 13;
				shipModule.powerConsumed = 0;
				shipModule_maxHealth = 25;
				break;
				case "weapon gatling 02 rat small 12,4":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs["Autocannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Autocannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = "Dual Bridge <color=#" + colorExplosive + "ff>Explosive</color> Autocannon";
				shipModule.description = "Autocannon designed by Rat Empire and based on multiple designs of other ancient weapons. Loved by rat admirals for high capacity. Has improved rate of fire and improved accuracy, but still long reload.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 100f, metals = 300f, synthetics = 200f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 1f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon + 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.20f;
				shipModule.Weapon.magazineSize = 12;
				shipModule.Weapon.accuracy = 14;
				shipModule.powerConsumed = 0;
				shipModule_maxHealth = 35;
				break;
				case "weapon gatling RatA 14,4":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Autocannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Autocannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = "Dual Spitter <color=#" + colorExplosive + "ff>Explosive</color> Autocannon";
				shipModule.description = "Higher caliber autocannon designed by Rat Empire. Was developed after through research original ancient autocannons. Although higher caliber reduces rate of fire, it grants greater are of effect on impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 150f, metals = 400f, synthetics = 250f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon + 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.22f;
				shipModule.Weapon.magazineSize = 6;
				shipModule.Weapon.accuracy = 14;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 30;
				break;
				case "weapon gatling RatB 15,5":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Autocannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Autocannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = "Triple Spitter <color=#" + colorExplosive + "ff>Explosive</color> Autocannon";
				shipModule.description = "Heavier version of high caliber autocannon designed by Rat Empire. Integration of additional barrel increases size of consecutive salvo, while not affecting negatively other properties such as rate of fire.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 200f, metals = 500f, synthetics = 300f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon + 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.20f;
				shipModule.Weapon.magazineSize = 9;
				shipModule.Weapon.accuracy = 14;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 30;
				break;
				case "weapon gatling whiteA 13,4":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs["Autocannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Autocannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = "Blizzard <color=#" + colorExplosive + "ff>Explosive</color> Autocannon";
				shipModule.description = "A modern rotary autocannon developed by Terran Federation for highly intensive combat zones. Has good rate of fire, improved targeting system that grants better accuracy, but average area of effect on impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 275f, metals = 650f, synthetics = 375f, exotics = 1f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.17f;
				shipModule.Weapon.magazineSize = 8;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 40;
				break;
				case "weapon gatling whiteB 14,5":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs["Autocannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Autocannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = "Hailstorm <color=#" + colorExplosive + "ff>Explosive</color> Autocannon";
				shipModule.description = "This modern rotary autocannon has upgraded ignition chamber that increases amount of shots that it can do before cooling reagent is used up. Greater projectile density reduces risk of full interception by CIWS.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 350f, metals = 800f, synthetics = 450f, exotics = 1f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.17f;
				shipModule.Weapon.magazineSize = 12;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 40;
				break;
				case "weapon Sniper cannon 4":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs["Autocannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Autocannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = "Whirlwind <color=#" + colorExplosive + "ff>Explosive</color> Autocannon";
				shipModule.description = "Advanced high caliber quad-barreled autocannon has immense projectile density, while keeping original specs of high caliber autocannons such as effective impact area, proper cooling speed and stable ignition chamber.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 1200f, synthetics = 800f, exotics = 3f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.15f;
				shipModule.Weapon.magazineSize = 16;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 40;
				break;
				case "weapon gatling ClawA 12,4":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs["Autocannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Autocannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "Gauss Claw <color=#" + colorKinetic + "ff>Kinetic</color> Autocannon";
				shipModule.description = "This autocannon uses gauss coils acceleration technology to launch dense metallic projectiles with immense velocity at enemy ships. At expense of high energy and metal consumption its projectiles ignore armor deflection.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 450f, metals = 1000f, synthetics = 700f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonGauss;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.17f;
				shipModule.Weapon.magazineSize = 8;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 45;
				break;
				case "weapon gatling ClawB 14,5":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Autocannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Autocannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "Gauss Talon <color=#" + colorKinetic + "ff>Kinetic</color> Autocannon";
				shipModule.description = "A gauss autocannon that is upgraded with second barrel, which allows it to reduce strain on initial barrel and at the same time increase projectile destiny, while slightly increasing energy and metal consumption.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 600f, metals = 1500f, synthetics = 1000f, exotics = 3f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonGauss;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.17f;
				shipModule.Weapon.magazineSize = 12;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 45;
				break;
				case "weapon gatling blaster small 12,5":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs["Autocannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Autocannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = "Buckingham <color=#" + colorPlasma + "ff>Plasma</color> Autocannon";
				shipModule.description = "An energy autocannon that consumes certain amount of fuel, which is passed through high voltage cyclotron that turns it into high emission energy projectiles that never deflect, but also incapable of ignoring shields.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 450f, metals = 1000f, synthetics = 1250f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonFast;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.20f;
				shipModule.Weapon.magazineSize = 8;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 4;
				shipModule_maxHealth = 40;
				break;
				case "weapon gatling Insectoid plasma 18,4x2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Autocannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Autocannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = "Tranquility <color=#" + colorPlasma + "ff>Plasma</color> Autocannon";
				shipModule.description = "Advanced energy autocannon that has bigger high voltage cyclotron chamber that can process even more fuel at once in order to turn it into projectiles. It also has better particle accelerator that increases launch speed.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 600f, metals = 1500f, synthetics = 2000f, exotics = 3f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonFast;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.15f;
				shipModule.Weapon.magazineSize = 12;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 35;
				break;
				case "weapon gatling Insectoid cyano 15,4":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Autocannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Autocannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "Carnage Venom <color=#" + colorChemical + "ff>Chemical</color> Autocannon";
				shipModule.description = "Specialized autocannon that shots highly acidic and corrosive projectiles with great area of effect that do immense damage to the crew of the targeted ship. Production of specialized corrosion reagents requires exotics.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 1250f, synthetics = 2500f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 10f, metals = 2f, synthetics = 2f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.17f;
				shipModule.Weapon.magazineSize = 8;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 35;
				break;
				case "weapon ATK-MK1 old":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "F1-Bushwacker <color=#" + colorExplosive + "ff>Explosive</color> Howitzer";
				shipModule.description = "Ancient single-barreled artillery weapon that was developed and often applied in conventional warfare centuries ago. Rusty, has faulty ammo printing mechanism and expired reloading mechanism.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 50f, metals = 250f, synthetics = 200f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.9f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 35;
				break;
				case "weapon ATK-MK2 old":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "F2-Bushwacker <color=#" + colorExplosive + "ff>Explosive</color> Howitzer";
				shipModule.description = "Ancient double-barreled artillery weapon that was developed and often applied in conventional warfare centuries ago. Rusty, has faulty ammo printing mechanism and expired reloading mechanism.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 75f, metals = 350f, synthetics = 275f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, explosives = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.7f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 40;
				break;
				case "weapon ATK-MK3 old":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "F3-Bushwacker <color=#" + colorExplosive + "ff>Explosive</color> Howitzer";
				shipModule.description = "Ancient triple-barreled artillery weapon that was developed and often applied in conventional warfare centuries ago. Rusty, has faulty ammo printing mechanism and expired reloading mechanism.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 100f, metals = 450f, synthetics = 350f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 4f, explosives = 9f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer + 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.5f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 45;
				break;
				case "weapon ATK-MK1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "S1-Rebellion <color=#" + colorExplosive + "ff>Explosive</color> Howitzer";
				shipModule.description = "Modern version of ancient single-barreled artillery weapon that was developed centuries ago. Has upgraded targeting system, pristine ammo printing mechanism and extremely optimized reloading system.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 200f, metals = 750f, synthetics = 500f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 20f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.8f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 50;
				break;
				case "weapon ATK-MK2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "S2-Rebellion <color=#" + colorExplosive + "ff>Explosive</color> Howitzer";
				shipModule.description = "Modern version of ancient double-barreled artillery weapon that was developed centuries ago. Has upgraded targeting system, pristine ammo printing mechanism and extremely optimized reloading system.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 225f, metals = 825f, synthetics = 550f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, explosives = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.6f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 55;
				break;
				case "weapon ATK-MK3":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "S3-Rebellion <color=#" + colorExplosive + "ff>Explosive</color> Howitzer";
				shipModule.description = "Modern version of ancient triple-barreled artillery weapon that was developed centuries ago. Has upgraded targeting system, pristine ammo printing mechanism and extremely optimized reloading system.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 900f, synthetics = 600f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 4f, explosives = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.4f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 60;
				break;
				case "weapon cubecannon huge old":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "Detonator <color=#" + colorExplosive + "ff>Explosive</color> Howitzer";
				shipModule.description = "Ancient huge artillery weapon that fires oversized projectiles with extremely volatile payload. Degraded printing mechanism no longer prints proper projectiles, but still consumes a lot of resources.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 150f, metals = 600f, synthetics = 450f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, explosives = 10f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.20f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 11;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 6;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer + 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 6;
				shipModule.Weapon.shotInterval = 1.1f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 50;
				break;
				case "weapon cubecannon huge":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "Devastator <color=#" + colorExplosive + "ff>Explosive</color> Howitzer";
				shipModule.description = "Modern version of ancient huge artillery weapon. Has same ammo caliber as original, but due to optimized payload distribution algorithm and upgraded targeting system, has greater impact power and accuracy. ";
				shipModule.craftCost = new ResourceValueGroup { fuel = 300f, metals = 1000f, synthetics = 750f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, explosives = 12f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.20f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 20;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 9;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer + 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 6;
				shipModule.Weapon.shotInterval = 0.9f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 70;
				break;
				case "weapon emperorbanks cannon1x":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "X1-Coercer <color=#" + colorExplosive + "ff>Explosive</color> Howitzer";
				shipModule.description = "Commercial single-barreled artillery weapon that relies on optimal use of explosives to print and propel large high impact projectiles at enemies of the corporation that breached unsigned copyright agreements.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 275f, metals = 1000f, synthetics = 650f, exotics = 1f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 5;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 20f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 5;
				shipModule.Weapon.shotInterval = 0.7f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 50;
				break;
				case "weapon emperorbanks cannon2x":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "X2-Coercer <color=#" + colorExplosive + "ff>Explosive</color> Howitzer";
				shipModule.description = "Commercial double-barreled artillery weapon that relies on optimal use of explosives to print and propel large high impact projectiles at enemies of the corporation that breached unsigned copyright agreements.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 325f, metals = 1200f, synthetics = 800f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, explosives = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 5;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 5;
				shipModule.Weapon.shotInterval = 0.5f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 60;
				break;
				case "weapon emperorbanks cannon large":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = "Scarlet Dawn <color=#" + colorExplosive + "ff>Explosive</color> Howitzer";
				shipModule.description = "Commercial high-caliber artillery weapon that relies on abundant use of explosives to print and propel massive, almost nuke-sized projectiles at enemies of the corporation that breached unsigned copyright agreements.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 400f, metals = 1500f, synthetics = 1100f, exotics = 3f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 4f, explosives = 16f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.30f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 18;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 25;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 12;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 8;
				shipModule.Weapon.shotInterval = 0.9f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 80;
				break;
				case "weapon ratcannon high velocity":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = "Perforator <color=#" + colorKinetic + "ff>Kinetic</color> Howitzer";
				shipModule.description = "The pinnacle of Rat Empire's technological development and creativity. This weapon prints and propels specialized non-deflecting projectiles with perforation cone that drill through hull on impact and explode inside.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 1500f, synthetics = 1250f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 6f, explosives = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 6;
				shipModule.Weapon.shotInterval = 0.9f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 50;
				break;
				case "weapon ratcannon fire1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = "R1-Fireball <color=#" + colorIncendiary + "ff>Incendiary</color> Howitzer";
				shipModule.description = "A single-barreled area denial weapon developed by Rat Empire. Prints and launches incendiary bombs filled with flammable mixture. Incendiary bombs are very fragile in nature thus can be easily intercepted by any CIWS.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 350f, metals = 750f, synthetics = 1000f, exotics = 1f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 4f, metals = 1f, explosives = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.05f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.9f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 35;
				break;
				case "weapon ratcannon fire2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = "R2-Fireball <color=#" + colorIncendiary + "ff>Incendiary</color> Howitzer";
				shipModule.description = "A double-barreled area denial weapon developed by Rat Empire. Prints and launches incendiary bombs filled with flammable mixture. Incendiary bombs are very fragile in nature thus can be easily intercepted by any CIWS.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 450f, metals = 900f, synthetics = 1250f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 6f, metals = 2f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.05f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer + 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.7f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 40;
				break;
				case "weapon ratcannon fire3":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = "R3-Fireball <color=#" + colorIncendiary + "ff>Incendiary</color> Howitzer";
				shipModule.description = "A triple-barreled area denial weapon developed by Rat Empire. Prints and launches incendiary bombs filled with flammable mixture. Incendiary bombs are very fragile in nature thus can be easily intercepted by any CIWS.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 550f, metals = 1100f, synthetics = 1500f, exotics = 3f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 8f, metals = 3f, explosives = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.05f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer + 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.5f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 45;
				break;
				case "weapon diyfirebomber1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = "Blazefire <color=#" + colorIncendiary + "ff>Incendiary</color> Howitzer";
				shipModule.description = "Advanced double-cartridge area denial weapon that was developed by Black Market specialists. Prints and launches lightly armored incendiary bombs filled with extremely flammable, but solid compound that auto-ignites on impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 1250f, synthetics = 1500f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 6f, metals = 2f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.35f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 2;
				shipModule.Weapon.shotInterval = 0.7f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 40;
				break;
				case "weapon diyfirebomber2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = "Firestorm <color=#" + colorIncendiary + "ff>Incendiary</color> Howitzer";
				shipModule.description = "Advanced quadrupole-cartridge area denial weapon that was developed by Black Market specialists. Prints and launches lightly armored incendiary bombs filled with extremely flammable, but solid compound that auto-ignites on impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 1500f, synthetics = 1750f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 10f, metals = 4f, explosives = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.35f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 2;
				shipModule.Weapon.shotInterval = 0.5f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 50;
				break;
				case "weapon Energy cannon x1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.2f);
				shipModule.displayName = "Light Quasar <color=#" + colorPlasma + "ff>Plasma</color> Howitzer";
				shipModule.description = "A simple, yet effective electromagnetic pulse cannon that ejects highly energized projectiles that can't be deflected. Overloads shields and disrupts working modules. May start fires and shock crew on direct hull impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 750f, synthetics = 1000f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 4f, synthetics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 20;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 20;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 60;
				break;
				case "weapon Energy cannon x2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.2f);
				shipModule.displayName = "Heavy Quasar <color=#" + colorPlasma + "ff>Plasma</color> Howitzer";
				shipModule.description = "A simple, yet effective dual-barreled electromagnetic pulse cannon that ejects highly energized projectiles that can't be deflected. Overloads shields and disrupts working modules. May start fires and shock crew on direct hull impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 1000f, synthetics = 1250f, exotics = 3f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 5f, synthetics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 60;
				break;
				case "weapon Energy cannon OP":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.2f);
				shipModule.displayName = "Neutron Quasar <color=#" + colorPlasma + "ff>Plasma</color> Howitzer";
				shipModule.description = "A simple, yet effective overcharged electromagnetic pulse cannon that ejects highly energized projectiles that can't be deflected. Overloads shields and disrupts working modules. May start fires and shock crew on direct hull impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 1250f, synthetics = 1500f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 5f, synthetics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 40;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 40;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 20;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 60;
				break;
				case "weapon EMP energyball":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.2f);
				shipModule.displayName = "System Shock <color=#" + colorPlasma + "ff>Plasma</color> Howitzer";
				shipModule.description = "A powerful electromagnetic pulse cannon that ejects high-intensity energized projectiles that can't be deflected. Greatly overloads shields and disrupts working modules. May start fires and shock crew on direct hull impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 1500f, synthetics = 2000f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 4f, synthetics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 48;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 24;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 6;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 50;
				break;
				case "weapon EMP energyball 3x Tiger":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.2f);
				shipModule.displayName = "Shockwave <color=#" + colorPlasma + "ff>Plasma</color> Howitzer";
				shipModule.description = "An extremely powerful triple-barreled electromagnetic pulse cannon that ejects high-intensity energized projectiles that can't be deflected. Greatly overloads shields and disrupts working modules. May start fires and shock crew on direct hull impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1500f, metals = 2000f, synthetics = 2500f, exotics = 7f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 6f, synthetics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 32;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 16;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.50f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 15;
				shipModule_maxHealth = 50;
				break;
				case "weapon Floral cannon":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = "Dessolution <color=#" + colorChemical + "ff>Chemical</color> Howitzer";
				shipModule.description = "Anti-armor molecular acid cannon of organic origin. Consumes mainly organics and other materials to print and propel decently armored highly corrosive projectiles that melt matter and dissolve organics in huge radius on impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 500f, synthetics = 1000f, exotics = 5f, organics = 2000f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 12f, synthetics = 3f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 15;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 3;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 55;
				break;
				case "weapon exoticscannon1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Howitzers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Howitzers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = "Disintegrator <color=#" + colorExotical + "ff>Exotic</color> Howitzer";
				shipModule.description = "Experimental weapon that pints and launches chunks of extremely durable, but volatile material that uses destabilized exotic matter as catalyst. Volatile energy that released on impact will destroy and disrupt everything in the area of effect.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1500f, metals = 2500f, synthetics = 3500f, exotics = 20f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 4f, synthetics = 2f, explosives = 6f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 25;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 35;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 15;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 45;
				break;
				case "weapon Sniper cannon 0 DIY":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs["Railguns"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railguns"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = "Dead Eye <color=#" + colorKinetic + "ff>Kinetic</color> Railgun";
				shipModule.description = "Light linear acceleration weapon that was assembled from spare parts and extra energy cores. Prints and launches fragile high velocity kinetic projectiles that penetrate shields and armor, while doing extra damage to modules.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 100f, metals = 300f, synthetics = 100f, exotics = 1f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun + 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.8f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 25;
				break;
				case "weapon Sniper cannon 0":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Railguns"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railguns"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = "H1-Redeemer <color=#" + colorExplosive + "ff>Explosive</color> Railgun";
				shipModule.description = "Light single-barreled linear acceleration weapon that was developed by Terran Federation. Prints and launches fragile high velocity projectiles with explosive detonating cores that are extra effective against modules.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 450f, metals = 1000f, synthetics = 450f, exotics = 1f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 1f, explosives = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.8f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 35;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 35;
				break;
				case "weapon Sniper cannon 2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Railguns"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railguns"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = "H2-Redeemer <color=#" + colorExplosive + "ff>Explosive</color> Railgun";
				shipModule.description = "Light double-barreled linear acceleration weapon that was developed by Terran Federation. Prints and launches fragile high velocity projectiles with explosive detonating cores that are extra effective against modules.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 600f, metals = 1250f, synthetics = 600f, exotics = 3f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.6f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 35;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 40;
				break;
				case "weapon Sniper cannon 3":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs["Railguns"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railguns"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = "H3-Redeemer <color=#" + colorExplosive + "ff>Explosive</color> Railgun";
				shipModule.description = "Light triple-barreled linear acceleration weapon that was developed by Terran Federation. Prints and launches fragile high velocity projectiles with explosive detonating cores that are extra effective against modules.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 1500f, synthetics = 750f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, explosives = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.4f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 35;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 45;
				break;
				case "weapon Sniper cannon 2 insectoid":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs["Railguns"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railguns"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = "Rheinmetall <color=#" + colorKinetic + "ff>Kinetic</color> Railgun";
				shipModule.description = "Light linear acceleration weapon that was developed by Black Market specialists. Prints and launches lightly armored high velocity projectiles with extra heavy and durable core that does extreme damage to the modules.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 875f, metals = 1750f, synthetics = 875f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.6f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 35;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 45;
				break;
				case "weapon sniper cannon EMP":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Railguns"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railguns"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = "Suppressor <color=#" + colorPlasma + "ff>Disruptor</color> Railgun";
				shipModule.description = "Light linear acceleration weapon that was developed by Black Market specialists. Prints and launches lightly armored high velocity projectiles that release short electric impulse that disrupts modules and shocks crew on impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 875f, metals = 1750f, synthetics = 875f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 1f, synthetics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 60;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.6f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 35;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 45;
				break;
				case "weapon Spideraa shuriken":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Railguns"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railguns"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = "Flechette <color=#" + colorChemical + "ff>Chemical</color> Railgun";
				shipModule.description = "Light linear acceleration weapon that was developed by unknown force. Prints and launches lightly armored high velocity projectiles that release flechette coated by extremely toxic anti-personnel reagents on impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 875f, metals = 1750f, synthetics = 875f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 2f, metals = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 10;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.6f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 35;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 45;
				break;
				case "weapon cubecannon1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs["Railcannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railcannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = "B1-Partisan <color=#" + colorKinetic + "ff>Kinetic</color> Railcannon";
				shipModule.description = "Ancient single-barreled heavy linear acceleration weapon that was developed by civilization long gone. Prints and launches armored projectiles at high velocities that rip everything apart in their way, be it hull or modules.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 1000f, synthetics = 525f, exotics = 1f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 12;
				shipModule.Weapon.shotInterval = 0.8f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 50;
				break;
				case "weapon cubecannon1x3":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs["Railcannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railcannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = "B3-Partisan <color=#" + colorKinetic + "ff>Kinetic</color> Railcannon";
				shipModule.description = "Ancient triple-barreled heavy linear acceleration weapon that was developed by civilization long gone. Prints and launches armored projectiles at high velocities that rip everything apart in their way, be it hull or modules.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 1500f, synthetics = 875f, exotics = 3f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 12;
				shipModule.Weapon.shotInterval = 0.5f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 60;
				break;
				case "weapon Segmented cannon1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs["Railcannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railcannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = "Salvation <color=#" + colorKinetic + "ff>Kinetic</color> Railcannon";
				shipModule.description = "Modern single-cartridge heavy linear acceleration weapon that was developed by Terran Federation. Prints and launches heavily armored kinetic projectiles at extreme velocities that are followed by extremely destructive inversion waves.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 1250f, synthetics = 750f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailcannon;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 15;
				shipModule.Weapon.shotInterval = 1.0f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 45;
				break;
				case "weapon Segmented cannonx2 A":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs["Railcannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railcannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = "Atonement <color=#" + colorKinetic + "ff>Kinetic</color> Railcannon";
				shipModule.description = "Modern double-cartridge heavy linear acceleration weapon that was developed by Terran Federation. Prints and launches heavily armored kinetic projectiles at extreme velocities that are followed by extremely destructive inversion waves.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 1750f, synthetics = 1000f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailcannon;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 15;
				shipModule.Weapon.shotInterval = 0.8f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 50;
				break;
				case "weapon Segmented cannonx2 B":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs["Railcannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railcannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = "Repentance <color=#" + colorKinetic + "ff>Kinetic</color> Railcannon";
				shipModule.description = "Modern triple-cartridge heavy linear acceleration weapon that was developed by Terran Federation. Prints and launches heavily armored kinetic projectiles at extreme velocities that are followed by extremely destructive inversion waves.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 2250f, synthetics = 1250f, exotics = 7f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailcannon;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 15;
				shipModule.Weapon.shotInterval = 0.6f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 55;
				break;
				case "weapon Segmented cannonx2 C":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs["Railcannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railcannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = "Redemption <color=#" + colorKinetic + "ff>Kinetic</color> Railcannon";
				shipModule.description = "Modern quadruple-cartridge heavy linear acceleration weapon that was developed by Terran Federation. Prints and launches heavily armored kinetic projectiles at extreme velocities that are followed by extremely destructive inversion waves.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 2750f, synthetics = 1500f, exotics = 8f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 10f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailcannon;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 15;
				shipModule.Weapon.shotInterval = 0.4f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 60;
				break;
				case "weapon gatling Tiger":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Railcannons"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Railcannons"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = "Liberator <color=#" + colorKinetic + "ff>Kinetic</color> Railcannon";
				shipModule.description = "A pinnacle of human creativity in linear acceleration weaponry: belt-fed rotary multi-barreled railcannon. Prints and launches heavily armored kinetic projectiles at extreme velocities that are followed by extremely destructive inversion waves.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1500f, metals = 3000f, synthetics = 1750f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 10f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailcannon;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon - 10;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 15;
				shipModule.Weapon.shotInterval = 0.2f;
				shipModule.Weapon.magazineSize = 6;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 20;
				shipModule_maxHealth = 80;
				break;
				case "weapon mininglaser 0 old":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Ancient 1-Core <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Ancient mining laser that was designed centuries ago by first mining consortium. Its only redeeming feature that mined resources aren't damaged during extraction for asteroids.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 25f, metals = 50f, synthetics = 150f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser + 10f;
				shipModule.Weapon.shotInterval = 1.2f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 5;
				break;
				case "weapon mininglaser 0 defective":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Broken 3-Core <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Ancient mining laser that was designed centuries ago by first mining consortium. Initially had three emitters, but due to extensive usage and wear ended up with only one somewhat working emitter.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 25f, metals = 75f, synthetics = 150f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser + 10f;
				shipModule.Weapon.shotInterval = 1.0f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 13;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 4;
				break;
				case "weapon mininglaser 2 defective":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Broken 4-Core <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Ancient mining laser that was designed centuries ago by first mining consortium. Initially had four emitters, but due to extensive usage and wear ended up with only two somewhat working emitters.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 50f, metals = 150f, synthetics = 300f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser + 10f;
				shipModule.Weapon.shotInterval = 0.9f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 13;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 6;
				break;
				case "weapon mininglaser 3 defective":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Broken 5-Core <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Ancient mining laser that was designed centuries ago by first mining consortium. Initially had five emitters, but due to extensive usage and wear ended up with only three somewhat working emitters.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 75f, metals = 225f, synthetics = 450f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser + 10f;
				shipModule.Weapon.shotInterval = 0.8f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 13;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 8;
				break;
				case "weapon mininglaser 4 defective":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Broken 6-Core <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Ancient mining laser that was designed centuries ago by first mining consortium. Initially had six emitters, but due to extensive usage and wear ended up with only four somewhat working emitters.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 100f, metals = 300f, synthetics = 600f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser + 10f;
				shipModule.Weapon.shotInterval = 0.7f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 13;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 10;
				break;
				case "weapon mininglaser 1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "1-Core Mining <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Modern mining laser that was designed by most famous mining consortium. Has one emitter with optimized capacitors. Beside being good for resource extraction doubles as decent self-defense measure.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 50f, metals = 100f, synthetics = 200f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.50f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 10;
				break;
				case "weapon mininglaser 2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "2-Core Mining <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Modern mining laser that was designed by most famous mining consortium. Has two emitters with optimized capacitors. Beside being good for resource extraction doubles as decent self-defense measure.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 100f, metals = 200f, synthetics = 400f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.40f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 4;
				shipModule_maxHealth = 15;
				break;
				case "weapon mininglaser 3":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "3-Core Mining <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Modern mining laser that was designed by most famous mining consortium. Has three emitters with optimized capacitors. Beside being good for resource extraction doubles as decent self-defense measure.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 150f, metals = 300f, synthetics = 600f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 20;
				break;
				case "weapon mininglaser 4":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "4-Core Mining <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Modern mining laser that was designed by most famous mining consortium. Has four emitters with optimized capacitors. Beside being good for resource extraction doubles as decent self-defense measure.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 200f, metals = 400f, synthetics = 800f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.30f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 25;
				break;
				case "weapon mininglaser 5":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "5-Core Mining <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Modern mining laser that was designed by most famous mining consortium. Has five emitters with optimized capacitors. Beside being good for resource extraction doubles as decent self-defense measure.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 500f, synthetics = 1000f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.25f;
				shipModule.Weapon.magazineSize = 5;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 30;
				break;
				case "weapon mininglaser 6":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "6-Core Mining <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Modern mining laser that was designed by most famous mining consortium. Has six emitters with optimized capacitors. Beside being good for resource extraction doubles as decent self-defense measure.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 300f, metals = 600f, synthetics = 1200f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.2f;
				shipModule.Weapon.magazineSize = 6;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 35;
				break;
				case "weapon ratlaser 5":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Imperial Spike <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Initially mining laser that was redesigned by the Rat Empire into combat laser. Has five emitters with efficient capacitors. Still can be used for mining, but works better against compound alloys.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 325f, metals = 500f, synthetics = 1000f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser - 5f;
				shipModule.Weapon.shotInterval = 0.15f;
				shipModule.Weapon.magazineSize = 5;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 40;
				break;
				case "weapon ratlaser small no armor":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Imperial Shiv <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Rapid fire combat laser that was developed by Rat Empire. Advanced capacitors decently increase damage output. Exposed internal components decrease durability of the weapon.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 400f, metals = 750f, synthetics = 1250f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser + 5f;
				shipModule.Weapon.shotInterval = 0.25f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 35;
				break;
				case "weapon ratlaser small with armor":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Imperial Knife <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Rapid fire combat laser that was developed by Rat Empire. Advanced capacitors decently increase damage output. Heavy compound alloy plating increases durability of the weapon.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 475f, metals = 1000f, synthetics = 1250f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.20f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 50;
				break;
				case "weapon emperor minilaser":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Light-Focused <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Commercial light combat laser with two emitters that was developed to punish breachers of unsigned copyright agreements. Equipped with manipulators to clean dead bodies from ship's exterior.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 350f, metals = 600f, synthetics = 800f, exotics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 25;
				break;
				case "weapon emperor laser double":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Heavy-Focused <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Commercial medium combat laser with two emitters that was developed to punish breachers of unsigned copyright agreements. Has no manipulators to clean exterior, but twice as dangerous.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 1250f, synthetics = 1500f, exotics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.25f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 30;
				break;
				case "weapon emperor laser large":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Rapid-Focused <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Commercial rapid-fire combat laser with three emitters that was developed to punish breachers of unsigned copyright agreements. Perfect to deal with those who don't respect terms of service.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 1500f, synthetics = 1750f, exotics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.15f;
				shipModule.Weapon.magazineSize = 9;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 35;
				break;
				case "weapon Insectoid old fast laser":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Du-Effector <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Tactical combat weapon with two emitters. Probably was developed by Black Market specialists. State-of-art targeting and capacitor units increase recharge speed and damage output.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 475f, metals = 875f, synthetics = 1250f, exotics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser - 5f;
				shipModule.Weapon.shotInterval = 0.25f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 30;
				break;
				case "weapon Insectoid old fast laser 5x":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Lasers"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Lasers"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Quint-Effector <color=#" + colorLaserEmt + "ff>Laser</color> Emitter";
				shipModule.description = "Tactical combat weapon with five emitters. Probably was developed by Black Market specialists. State-of-art targeting and capacitor units increase recharge speed and damage output.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 1375f, synthetics = 1875f, exotics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser - 5f;
				shipModule.Weapon.shotInterval = 0.25f;
				shipModule.Weapon.magazineSize = 5;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 40;
				break;
				case "weapon DIY Laser":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = "Scrap Cutter <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Improvised beam weapon whose design was based on famous Terran weapon and optimized for production and assembly in low-resource conditions. Still better then nothing at all.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 50f, metals = 100f, synthetics = 175f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy;
				shipModule.Weapon.shotInterval = 1.00f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 4;
				shipModule_maxHealth = 10;
				break;
				case "weapon DIY raygun":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "Impulse Wave <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Basic beam weapon that was designed by Black Market specialists for mass production and distribution. Has questionable quality, but at least provides promised damage output.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 75f, metals = 150f, synthetics = 250f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy;
				shipModule.Weapon.shotInterval = 0.80f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 15;
				break;
				case "weapon bigbeamer1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "Light Focal <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Improved beam weapon that was designed by Black Market specialists. Has decent damage output and improved recharging mechanism. Quite cheap in production in maintenance.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 100f, metals = 200f, synthetics = 350f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 5f;
				shipModule.Weapon.shotInterval = 0.70f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 20;
				break;
				case "weapon bigbeamer2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "Medium Focal <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Improved beam weapon that was designed by Black Market specialists. Has decent damage output and improved recharging mechanism. Upgraded with improved focusing lenses.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 125f, metals = 250f, synthetics = 435f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 5f;
				shipModule.Weapon.shotInterval = 0.70f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 25;
				break;
				case "weapon bigbeamer3":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "Heavy Focal <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Improved beam weapon that was designed by Black Market specialists. Has decent damage output and improved recharging mechanism. Upgraded with overcharged beam emitters.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 150f, metals = 300f, synthetics = 500f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 9;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 5f;
				shipModule.Weapon.shotInterval = 0.70f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 30;
				break;
				case "weapon ratlaser short":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "Deathly Tail <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "A robust military beam emitter designed in Rat Empire. Has good damage output, but still uses old recharging mechanism. Cheap in maintenance as any other rat equipment.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 200f, metals = 350f, synthetics = 575f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 30;
				break;
				case "weapon ratlaser long":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "Killer Fang <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "A robust military beam emitter designed in Rat Empire. Has good damage output, but still uses old recharging mechanism. Upgraded with additional charge emission coils.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 400f, synthetics = 650f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy;
				shipModule.Weapon.shotInterval = 0.75f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 35;
				break;
				case "weapon tigerlaser MK1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "C1-Industrial <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Modern heavy duty industrial beam emitter developed by mining consortium. Its effective energy emission is perfect for construction of space station and deconstruction of compound alloys. Has low production requirements.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 300f, metals = 500f, synthetics = 750f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 5f;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 40;
				break;
				case "weapon tigerlaser MK2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "C2-Industrial <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Modern heavy duty industrial beam emitter developed by mining consortium. Its effective energy emission is perfect for construction of space station and deconstruction of compound alloys. Upgraded with second emitter.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 400f, metals = 750f, synthetics = 1000f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 5f;
				shipModule.Weapon.shotInterval = 0.45f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 50;
				break;
				case "weapon powerbeam-MK1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "Light Cutter <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Modern combat beam emitter developed by Terran Federation for military purposes. Very effective against starship hulls, energy shields and internal modules alike. Has state-of-art recharging mechanism. Favored by many military organization.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 375f, metals = 600f, synthetics = 900f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.65f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 10f;
				shipModule.Weapon.shotInterval = 0.55f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 40;
				break;
				case "weapon powerbeam-MK2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "Medium Cutter <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Modern combat beam emitter developed by Terran Federation for military purposes. Very effective against starship hulls, energy shields and internal modules alike. Has state-of-art recharging mechanism. Upgraded with additional emitter.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 450f, metals = 900f, synthetics = 1200f, exotics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.65f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 10f;
				shipModule.Weapon.shotInterval = 0.45f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 9;
				shipModule_maxHealth = 50;
				break;
				case "weapon powerbeam-MK3":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "Heavy Cutter <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Modern combat beam emitter developed by Terran Federation for military purposes. Very effective against starship hulls, energy shields and internal modules alike. Has state-of-art recharging mechanism. Upgraded with two additional emitters.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 600f, metals = 1200f, synthetics = 1500f, exotics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.65f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 10f;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 60;
				break;
				case "weapon spideraa triplelaser":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "Triple-Pulse <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Heavy and accurate triple-joined beam emitter that utilized repulsor technology to concentrate energy in desired direction. Designed by unknown party even to this day. Has state-of-art targeting unit and provides very powerful damage output.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 1250f, synthetics = 1750f, exotics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 16;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 5f;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 50;
				break;
				case "weapon spideraa quadlaser":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "Quadro-Pulse <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Heavy and accurate quadro-joined beam emitter that utilized repulsor technology to concentrate energy in desired direction. Designed by unknown party even to this day. Has state-of-art targeting unit and provides very powerful damage output.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 1500f, synthetics = 2000f, exotics = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 14;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 9;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 5f;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 15;
				shipModule_maxHealth = 60;
				break;
				case "weapon insectoid fast laser":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "Rapid Effector <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Advanced beam weapon with rapid fire capabilities. Developed by Insectoid Alliance engineers. Unique design allows single emitter multiple times in succession to empty all capacitors before entering cooldown mode. Doubles as emergency bunker.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 1750f, synthetics = 2250f, exotics = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 10f;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 6;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 15;
				shipModule_maxHealth = 80;
				break;
				case "weapon Insectoid slowlaser":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Beams"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Beams"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = "Ultra-Effector <color=#" + colorBeamEmt + "ff>Beam</color> Emitter";
				shipModule.description = "Advanced beam weapon with ultra focusing capabilities. Developed by Insectoid Alliance engineers. Unique design allows emitter to focus all energy until it completely bypasses alloy reflection threshold, thus damaging starship regardless of its deflection capabilities.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 1500f, synthetics = 2500f, exotics = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 35;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 25;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 5;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 10f;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 20;
				shipModule_maxHealth = 60;
				break;
				case "weapon DIY raygun orange":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs["Heat Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Heat Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.2f);
				shipModule.displayName = "Thermal Wave <color=#" + colorHeatRay + "ff>Heat Ray</color> Projector";
				shipModule.description = "Basic heat ray weapon that was designed by Black Market specialists for mass production and distribution. Has questionable quality, but still melts hulls and sets interiors of unshielded ships on fire like fireworks during Christmas.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 500f, synthetics = 250f, exotics = 3f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamHeatRay + 5f;
				shipModule.Weapon.shotInterval = 0.90f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 15;
				break;
				case "weapon Heatray emitter":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Heat Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Heat Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.2f);
				shipModule.displayName = "Imperial Fire <color=#" + colorHeatRay + "ff>Heat Ray</color> Projector";
				shipModule.description = "Standard heat ray weapon that uses fuel as stable catalyst. To surprise of all sentient beings in the galaxy was first designed by Rat Empire engineers, when Rat Empire generals concluded that their current energy weapons doesn't pacify enemies fast enough.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 1500f, synthetics = 750f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				shipModule.Weapon.reloadInterval = reloadBeamHeatRay - 5f;
				shipModule.Weapon.shotInterval = 0.75f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 45;
				break;
				case "weapon Heatray emitter x red":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs["Heat Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Heat Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.2f);
				shipModule.displayName = "Overcharged <color=#" + colorHeatRay + "ff>Heat Ray</color> Projector";
				shipModule.description = "Improved heat ray weapon that uses fuel as stable catalyst. A rare case of weapon that Commercial Consortium can't put under copyright clause, because it was based on Rat Empire designs, which by default are always unofficially open source for the rest of the galaxy.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 1750f, synthetics = 1250f, exotics = 7f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 9;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 6;
				shipModule.Weapon.reloadInterval = reloadBeamHeatRay;
				shipModule.Weapon.shotInterval = 0.60f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 60;
				break;
				case "weapon Squid beamer heatray":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Heat Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Heat Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.2f);
				shipModule.displayName = "Aflame Inferno <color=#" + colorHeatRay + "ff>Heat Ray</color> Projector";
				shipModule.description = "Advanced heat ray weapon that uses fuel as stable catalyst. Designed by Black Market specialists per special request. Probably somebody decided that existing methods of killing with fire are not intense enough. Delivers serenity and warmth to unruly enemy in effective manner.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 2000f, synthetics = 1500f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 11;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 8;
				shipModule.Weapon.reloadInterval = reloadBeamHeatRay;
				shipModule.Weapon.shotInterval = 0.45f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 35;
				break;
				case "weapon DIY raygun blue":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs["Disruptors"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Disruptors"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = "Charged Wave <color=#" + colorEnergyRay + "ff>Energy</color> Disruptor";
				shipModule.description = "Basic energy disruption weapon that was designed by Black Market specialists for mass production and distribution. Has questionable quality, but still fries any starship circuits and shocks crew to extent of lighting them like holiday lights on Christmas tree.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 150f, metals = 200f, synthetics = 350f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 15;
				break;
				case "weapon DIY EMP":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Disruptors"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Disruptors"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = "Shield Breaker <color=#" + colorEnergyRay + "ff>Energy</color> Disruptor";
				shipModule.description = "Basic energy disruption weapon designed by unknown party, probably by Scrappers or Slavers. Uses specialized synthetic compound to charge capacitors for proper electromagnetic discharge. On impact, emitted beam discharges intense electromagnetic impulse in the targeted area.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 300f, synthetics = 500f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 25;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.85f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 18;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 5f;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 20;
				break;
				case "weapon dual EMP":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Disruptors"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Disruptors"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = "Dual Breaker <color=#" + colorEnergyRay + "ff>Energy</color> Disruptor";
				shipModule.description = "Standard energy disruption weapon designed by Terran Federation for military purposes. Uses advanced internal components such isolated high-capacity overcharged coils to produce greater electromagnetic effect and over greater area at point of impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 400f, metals = 450f, synthetics = 750f, exotics = 1f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.10f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 18;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 5f;
				shipModule.Weapon.shotInterval = 0.45f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 25;
				break;
				case "weapon DIY exotics EMP sniper":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs["Disruptors"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Disruptors"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = "Force Breaker <color=#" + colorEnergyRay + "ff>Energy</color> Disruptor";
				shipModule.description = "Improved energy disruption weapon designed by unknown party, probably by Scrappers or Slavers. Uses specialized synthetic compound to charge capacitors for proper electromagnetic discharge. On impact, emitted beam discharges intense electromagnetic impulse in the targeted area.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 600f, synthetics = 900f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 45;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 5;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 5f;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 11;
				shipModule_maxHealth = 25;
				break;
				case "weapon Insectoid shield disruptor":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs["Disruptors"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Disruptors"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = "Shock-Effector <color=#" + colorEnergyRay + "ff>Energy</color> Disruptor";
				shipModule.description = "Advanced energy disruption weapon with three emitters designed by Insectoid Alliance engineers. Uses capacitors with advanced charge compression capabilities, which results in greater electromagnetic discharge impulse then in other energy disruption weapon.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 650f, metals = 800f, synthetics = 1200f, exotics = 3f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 35;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.35f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 17;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 5f;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 30;
				break;
				case "weapon spideraa disruptor":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs["Disruptors"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Disruptors"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = "White Scream <color=#" + colorEnergyRay + "ff>Energy</color> Disruptor";
				shipModule.description = "Advanced energy disruption weapon with three emitters designed by unknown party. Uses hardly understood repulsor technology that forces electrons to rich critical mass, when emitted as energy stream from this energy disruption weapon, which results in greater EMP effect.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 800f, metals = 1000f, synthetics = 1500f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 35;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 20;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 5f;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 13;
				shipModule_maxHealth = 35;
				break;
				case "weapon Squid beamer EMP":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs["Disruptors"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Disruptors"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = "Warped Light <color=#" + colorEnergyRay + "ff>Energy</color> Disruptor";
				shipModule.description = "Highly advanced energy disruption weapon with single powerful emitter designed by Black Market specialists. Uses immaterium energy to empower high volume capacitors with unstable energy that allow emitted beam to release extremely strong electromagnetic impulse on impact.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 1250f, synthetics = 1750f, exotics = 7f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 45;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 70;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 7;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 10f;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 14;
				shipModule_maxHealth = 40;
				break;
				case "weapon rare warp shield breaker EMP":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Disruptors"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Disruptors"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = "Singularity <color=#" + colorEnergyRay + "ff>Energy</color> Disruptor";
				shipModule.description = "Highly advanced energy disruption weapon with single powerful emitter. Original designer is unknown, but nephrite core of the weapon has markings that decoded as \"Chmmr\" by our AI, whatever it could mean. On emitted beam impact releases extremely powerful electromagnetic impulse.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 1750f, synthetics = 2250f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 60;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 80;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 9;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 10f;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 15;
				shipModule_maxHealth = 50;
				break;
				case "weapon DIY exoticslaser":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = "Chromatic Flare <color=#" + colorExoticRay + "ff>Exotic Ray</color> Projector";
				shipModule.description = "Basic exotic ray weapon that uses destabilized exotic matter to produce ray of destructive energy. Was designed by Black Market specialists, when exotic elements became more common and available. Very effective, but consumes exotic matter as ammunition.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 150f, metals = 350f, synthetics = 500f, exotics = 1f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay + 5f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 20;
				break;
				case "weapon DIY exoticslaser dual":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = "Prismatic Flare <color=#" + colorExoticRay + "ff>Exotic Ray</color> Projector";
				shipModule.description = "Basic exotic ray weapon that uses destabilized exotic matter to produce ray of destructive energy. Was designed by Black Market specialists, when exotic elements became more common and available. Was upgraded with second ray projector for improved damage output.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 500f, synthetics = 700f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay + 5f;
				shipModule.Weapon.shotInterval = 0.55f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 25;
				break;
				case "weapon Florallaser":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = "Biochemical <color=#" + colorExoticRay + "ff>Exotic Ray</color> Projector";
				shipModule.description = "Exotic ray weapon of organic origin that converts organic elements into destabilized exotic matter in order to produce ray of destructive energy. Probably was developed by very thrifty individuals that wanted to conserve exotic matter as much as possible.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 350f, metals = 500f, synthetics = 500f, exotics = 3f, organics = 2000f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 15f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 25;
				break;
				case "weapon Squid beamer single":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = "Focal Deathray <color=#" + colorExoticRay + "ff>Exotic Ray</color> Projector";
				shipModule.description = "Advanced exotic ray weapon that uses destabilized exotic matter with application of uncertain technology to produce ray of destructive energy. Designed by an unknown party that believes in a Greater Good. Has very efficient damage output.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 750f, synthetics = 1000f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 25;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 17;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 17;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 17;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 5;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 21;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 30;
				break;
				case "weapon Squid beamer double":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = "Dual Deathray <color=#" + colorExoticRay + "ff>Exotic Ray</color> Projector";
				shipModule.description = "Advanced exotic ray weapon that uses destabilized exotic matter with application of uncertain technology to produce ray of destructive energy. Designed by an unknown party that believes in a Greater Good. Upgraded with second ray projector.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 650f, metals = 900f, synthetics = 1200f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 25;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 11;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 11;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 11;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay;
				shipModule.Weapon.shotInterval = 0.55f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 21;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 40;
				break;
				case "weapon Squid warp ray effector":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = "Wave-Folding <color=#" + colorExoticRay + "ff>Exotic Ray</color> Projector";
				shipModule.description = "Advanced exotic ray weapon that uses destabilized exotic matter to tear miniature hole in reality and produce ray of destructive immaterium energy. Designed by an unknown party, but contains a lot of pointless \"Chaos Undivided\" scribbles.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 800f, metals = 1200f, synthetics = 1500f, exotics = 7f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 35;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.30f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 27;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 27;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 27;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 8;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 5f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 21;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 35;
				break;
				case "weapon rarelaserblue1":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = "Light Nephrite <color=#" + colorExoticRay + "ff>Exotic Ray</color> Projector";
				shipModule.description = "Highly advanced light exotic ray weapon that uses destabilized exotic matter. Original designer is unknown, but nephrite core of the weapon has markings that decoded as \"Chmmr\" by our AI, whatever it could mean. Very efficient versus everything.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 1500f, synthetics = 2000f, exotics = 9f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 40;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.10f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 10;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 5f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 22;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 40;
				break;
				case "weapon rarelaserblue2":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = "Heavy Nephrite <color=#" + colorExoticRay + "ff>Exotic Ray</color> Projector";
				shipModule.description = "Highly advanced heavy exotic ray weapon that uses destabilized exotic matter. Original designer is unknown, but nephrite core of the weapon has markings that decoded as \"Chmmr\" by our AI, whatever it could mean. Has great damage output.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 1750f, synthetics = 2500f, exotics = 12f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 45;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.30f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 37;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 37;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 37;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 12;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 5f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 22;
				shipModule.powerConsumed = 14;
				shipModule_maxHealth = 50;
				break;
				case "weapon rarelaserblue2 dual":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = "Dual Nephrite <color=#" + colorExoticRay + "ff>Exotic Ray</color> Projector";
				shipModule.description = "Highly advanced heavy exotic ray weapon that uses destabilized exotic matter. Original designer is unknown, but nephrite core of the weapon has markings that decoded as \"Chmmr\" by our AI, whatever it could mean. Upgraded with second ray projector.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1500f, metals = 2250f, synthetics = 2750f, exotics = 15f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 45;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.30f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 21;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 21;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 21;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 7;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 5f;
				shipModule.Weapon.shotInterval = 0.55f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 22;
				shipModule.powerConsumed = 16;
				shipModule_maxHealth = 60;
				break;
				case "weapon spideraa laser":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = "Warp Storm <color=#" + colorExoticRay + "ff>Exotic Ray</color> Projector";
				shipModule.description = "Advanced exotic ray weapon that uses destabilized exotic matter under influence of repulsor waves to produce ray of destructive energy. Designed by unknown party with probably evil intentions. Has improved damage output, accuracy and area of effect.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 1750f, metals = 2500f, synthetics = 3250f, exotics = 20f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.30f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 16;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 5f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 22;
				shipModule.powerConsumed = 17;
				shipModule_maxHealth = 50;
				break;
				case "weapon BFGx9 for bluestar":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = "BFG9000 Plus <color=#" + colorExoticRay + "ff>Exotic Ray</color> Projector";
				shipModule.description = "Exceptional exotic ray weapon that converts destabilized exotic matter into beam of argent energy that destroys everything in its way. Looks like design of human origin, but at the same time not. Has great damage output, but also great requirements.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 2000f, metals = 3000f, synthetics = 3750f, exotics = 35f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 60;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 55;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 55;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 55;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 18;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 10f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 22;
				shipModule.powerConsumed = 18;
				shipModule_maxHealth = 80;
				break;
				case "weapon rarelasergothic small":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = "Lo-Gothic Relic <color=#" + colorExoticRay + "ff>Exotic Ray</color> Projector";
				shipModule.description = "Light exotic ray weapon of unknown origin that uses destabilized exotic matter to produce ray of extremely destructive energy. Wasn't designed, but ripped off from something that resembles drifting interstellar gothic cathedral. Has extreme damage output.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 2500f, metals = 3500f, synthetics = 4000f, exotics = 50f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 65;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 60;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 60;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 60;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 20;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 10f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 22;
				shipModule.powerConsumed = 19;
				shipModule_maxHealth = 50;
				break;
				case "weapon rarelasergothic":
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs["Exotic Rays"].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = "Hi-Gothic Relic <color=#" + colorExoticRay + "ff>Exotic Ray</color> Projector";
				shipModule.description = "Heavy exotic ray weapon of unknown origin that uses destabilized exotic matter to produce ray of extremely destructive energy. Wasn't designed, but ripped off from something that resembles drifting interstellar gothic cathedral. Has immense damage output.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 3000f, metals = 4000f, synthetics = 4500f, exotics = 75f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 75;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 75;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 75;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 75;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 25;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 10f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 22;
				shipModule.powerConsumed = 20;
				shipModule_maxHealth = 60;
				break;
				case "bossweapon insectoid ship":
				shipModule.displayName = "Sub-Atomic Disintegrator";
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 5.0f);
				shipModule.description = "Power readings are off the scale. It morphs in unexpected ways before shooting.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 3750f, metals = 7500f, synthetics = 9500f, exotics = 250f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 500;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 100;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 200;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 50;
				shipModule.Weapon.reloadInterval = 90f;
				shipModule.Weapon.shotInterval = 1.75f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 20;
				shipModule_maxHealth = 150;
				break;
				case "bossweapon weirdaxer":
				shipModule.displayName = "Planet Killer Annihilator";
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 8.0f);
				shipModule.description = "Power readings are off the scale. It morphs in unexpected ways before shooting.";
				shipModule.craftCost = new ResourceValueGroup { fuel = 5000f, metals = 7500f, synthetics = 9500f, exotics = 500f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.reloadInterval = 300f;
				shipModule.maxHealthAdd = 5000;
				shipModule_maxHealth = 5000;
				break;
				default:
				if (initItemData) Debug.LogWarning($"[NEW WEAPON] {FFU_BE_Mod_Information.GetSelectedModuleExactData(shipModule, false, true, false, false, false)}");
				shipModule.displayName = "(WEAPON) " + shipModule.displayName;
				break;
			}
			shipModule.asteroidDeflectionPercentAdd = 0;
			shipModule.craftCost.organics *= 2;
			shipModule.craftCost.metals *= 2;
			shipModule.craftCost.synthetics *= 2;
			shipModule.craftCost.explosives *= 2;
			shipModule.craftCost.exotics *= 2;
			shipModule.Weapon.disableAudio = WeaponModule.DisableAudio.None;
			AccessTools.FieldRefAccess<ShipModule, int>(shipModule, "maxHealth") = shipModule_maxHealth;
			if ((shipModule.Weapon.ProjectileOrBeamPrefab as Projectile) != null) {
				AccessTools.FieldRefAccess<Projectile, int>(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile, "pointDefPriority") = shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority;
				AccessTools.FieldRefAccess<ShootAtDamageDealer, int>(shipModule.Weapon.ProjectileOrBeamPrefab, "maxHealth") = shipModule.Weapon.overrideProjectileHealth;
			}
			FFU_BE_Mod_Modules.UpdateCommonStats(shipModule);
		}
	}
}
