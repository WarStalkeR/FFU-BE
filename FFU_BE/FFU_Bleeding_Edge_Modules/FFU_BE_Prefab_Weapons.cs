using RST;
using HarmonyLib;
using UnityEngine;

namespace FFU_Bleeding_Edge {
	public class FFU_BE_Prefab_Weapons {
		public static float prjSpeedRocketSlow = 3f;
		public static float prjSpeedRocketBasic = 4f;
		public static float prjSpeedRocketNormal = 5f;
		public static float prjSpeedRocketFast = 6f;
		public static float prjSpeedRocketUltra = 12f;
		public static float prjSpeedAutocannonNormal = 17f;
		public static float prjSpeedAutocannonFast = 19f;
		public static float prjSpeedAutocannonGauss = 21f;
		public static float prjSpeedHowitzerNormal = 14f;
		public static float prjSpeedHowitzerFast = 17f;
		public static float prjSpeedRailgun = 23f;
		public static float prjSpeedRailcannon = 25f;
		public static float reloadProjRocket = 75f;
		public static float reloadProjAutocannon = 45f;
		public static float reloadProjHowitzer = 60f;
		public static float reloadProjRailgun = 45f;
		public static float reloadProjRailcannon = 60f;
		public static float reloadBeamLaser = 35f;
		public static float reloadBeamEnergy = 45f;
		public static float reloadBeamHeatRay = 55f;
		public static float reloadBeamDisruptor = 50f;
		public static float reloadBeamRadiator = 50f;
		public static float reloadBeamExoticRay = 60f;
		public static int SortModules(int moduleID) {
			int idx = 0;
			//Rockets
			if (moduleID == 821254137) return idx; idx++; //weapon DIY Rockets x1
			if (moduleID == 597713891) return idx; idx++; //weapon ratmissile x2
			if (moduleID == 777119861) return idx; idx++; //weapon ratmissile x3
			if (moduleID == 185094886) return idx; idx++; //weapon miscmissile x4
			if (moduleID == 1975811673) return idx; idx++; //weapon emperormissile large x5
			if (moduleID == 759200248) return idx; idx++; //weapon emperormissiles small x2
			if (moduleID == 97880399) return idx; idx++; //weapon tigermissile x2
			if (moduleID == 7208646) return idx; idx++; //weapon alienmissile x5
			if (moduleID == 1170008060) return idx; idx++; //weapon alienmissile x7
			if (moduleID == 85351226) return idx; idx++; //weapon spideraamissilex3
			if (moduleID == 1473319987) return idx; idx++; //weapon spideraamissilex4
			if (moduleID == 1517283306) return idx; idx++; //weapon capitalorockets x2
			if (moduleID == 1348589878) return idx; idx++; //weapon monolith missile x1
			if (moduleID == 469527491) return idx; idx++; //weapon ancientrockets x3
			if (moduleID == 1571322820) return idx; idx++; //weapon tigermissile large
			//Autocannons
			if (moduleID == 1780996798) return idx; idx++; //weapon DIY Minicannon ancient 2,3
			if (moduleID == 1363897257) return idx; idx++; //weapon gatling 01 ancient dual 14,4
			if (moduleID == 1957651014) return idx; idx++; //weapon gatling 02 rat small 12,4
			if (moduleID == 704483685) return idx; idx++; //weapon gatling RatA 14,4
			if (moduleID == 123083978) return idx; idx++; //weapon gatling RatB 15,5
			if (moduleID == 1092529672) return idx; idx++; //weapon gatling whiteA 13,4
			if (moduleID == 689245145) return idx; idx++; //weapon gatling whiteB 14,5
			if (moduleID == 698348090) return idx; idx++; //weapon Sniper cannon 4
			if (moduleID == 1501025877) return idx; idx++; //weapon gatling ClawA 12,4
			if (moduleID == 1566651491) return idx; idx++; //weapon gatling ClawB 14,5
			if (moduleID == 1890403578) return idx; idx++; //weapon gatling blaster small 12,5
			if (moduleID == 992516328) return idx; idx++; //weapon gatling Insectoid plasma 18,4x2
			if (moduleID == 458272126) return idx; idx++; //weapon gatling Insectoid cyano 15,4
			if (moduleID == 797718711) return idx; idx++; //weapon weirdship gatling
			//Howitzers
			if (moduleID == 1521997681) return idx; idx++; //weapon ATK-MK1 old
			if (moduleID == 1118713154) return idx; idx++; //weapon ATK-MK2 old
			if (moduleID == 537313447) return idx; idx++; //weapon ATK-MK3 old
			if (moduleID == 1281856982) return idx; idx++; //weapon ATK-MK1
			if (moduleID == 1685141509) return idx; idx++; //weapon ATK-MK2
			if (moduleID == 119057568) return idx; idx++; //weapon ATK-MK3
			if (moduleID == 1675488140) return idx; idx++; //weapon cubecannon huge old
			if (moduleID == 114834467) return idx; idx++; //weapon cubecannon huge
			if (moduleID == 865561327) return idx; idx++; //weapon emperorbanks cannon1x
			if (moduleID == 865561324) return idx; idx++; //weapon emperorbanks cannon2x
			if (moduleID == 533548711) return idx; idx++; //weapon emperorbanks cannon large
			if (moduleID == 887190895) return idx; idx++; //weapon ratcannon high velocity
			if (moduleID == 1662502911) return idx; idx++; //weapon ratcannon fire1
			if (moduleID == 2065787438) return idx; idx++; //weapon ratcannon fire2
			if (moduleID == 499703497) return idx; idx++; //weapon ratcannon fire3
			if (moduleID == 30747850) return idx; idx++; //weapon diyfirebomber1
			if (moduleID == 30747849) return idx; idx++; //weapon diyfirebomber2
			if (moduleID == 1532741738) return idx; idx++; //weapon Energy cannon x1
			if (moduleID == 1532741737) return idx; idx++; //weapon Energy cannon x2
			if (moduleID == 1768012478) return idx; idx++; //weapon Energy cannon OP
			if (moduleID == 1482677315) return idx; idx++; //weapon EMP energyball
			if (moduleID == 876704941) return idx; idx++; //weapon EMP energyball 3x Tiger
			if (moduleID == 1519934886) return idx; idx++; //weapon babycannon1
			if (moduleID == 357135472) return idx; idx++; //weapon babycannon3
			if (moduleID == 790917823) return idx; idx++; //weapon Floral cannon
			if (moduleID == 605446971) return idx; idx++; //weapon hi-tec cannon
			if (moduleID == 1983239915) return idx; idx++; //weapon exoticscannon1
			//Railguns
			if (moduleID == 1751631045) return idx; idx++; //weapon Sniper cannon 0 DIY
			if (moduleID == 514626098) return idx; idx++; //weapon Sniper cannon 0
			if (moduleID == 1499937036) return idx; idx++; //weapon Sniper cannon 2
			if (moduleID == 918537329) return idx; idx++; //weapon Sniper cannon 3
			if (moduleID == 1240034396) return idx; idx++; //weapon Sniper cannon 2 insectoid
			if (moduleID == 1567764648) return idx; idx++; //weapon sniper cannon EMP
			if (moduleID == 985673324) return idx; idx++; //weapon Spideraa shuriken
			if (moduleID == 1627732855) return idx; idx++; //weapon rapid cannon
			//Railcannons
			if (moduleID == 1316645801) return idx; idx++; //weapon cubecannon1
			if (moduleID == 1615383632) return idx; idx++; //weapon cubecannon1x3
			if (moduleID == 894416346) return idx; idx++; //weapon Segmented cannon1
			if (moduleID == 1086561638) return idx; idx++; //weapon Segmented cannonx2 A
			if (moduleID == 1086561639) return idx; idx++; //weapon Segmented cannonx2 B
			if (moduleID == 1086561640) return idx; idx++; //weapon Segmented cannonx2 C
			if (moduleID == 412909021) return idx; idx++; //weapon gatling Tiger
			//Lasers
			if (moduleID == 842299308) return idx; idx++; //weapon mininglaser 0 old
			if (moduleID == 1386594796) return idx; idx++; //weapon mininglaser 0 defective
			if (moduleID == 1362762978) return idx; idx++; //weapon mininglaser 2 defective
			if (moduleID == 109007005) return idx; idx++; //weapon mininglaser 3 defective
			if (moduleID == 292919296) return idx; idx++; //weapon mininglaser 4 defective
			if (moduleID == 1594290506) return idx; idx++; //weapon mininglaser 1
			if (moduleID == 1191005979) return idx; idx++; //weapon mininglaser 2
			if (moduleID == 609606272) return idx; idx++; //weapon mininglaser 3
			if (moduleID == 206321745) return idx; idx++; //weapon mininglaser 4
			if (moduleID == 1772405686) return idx; idx++; //weapon mininglaser 5
			if (moduleID == 1369121159) return idx; idx++; //weapon mininglaser 6
			if (moduleID == 1019707953) return idx; idx++; //weapon ratlaser 5
			if (moduleID == 1724240697) return idx; idx++; //weapon ratlaser small no armor
			if (moduleID == 1345622970) return idx; idx++; //weapon ratlaser small with armor
			if (moduleID == 474553624) return idx; idx++; //weapon emperor minilaser
			if (moduleID == 1340539166) return idx; idx++; //weapon emperor laser double
			if (moduleID == 681262058) return idx; idx++; //weapon emperor laser large
			if (moduleID == 109243084) return idx; idx++; //weapon Insectoid old fast laser
			if (moduleID == 2100491633) return idx; idx++; //weapon Insectoid old fast laser 5x
			//Beams
			if (moduleID == 55650103) return idx; idx++; //weapon DIY Laser
			if (moduleID == 1281020726) return idx; idx++; //weapon ratlaser short
			if (moduleID == 1447130390) return idx; idx++; //weapon ratlaser long
			if (moduleID == 306184113) return idx; idx++; //weapon tigerlaser MK1
			if (moduleID == 306184114) return idx; idx++; //weapon tigerlaser MK2
			if (moduleID == 1860805838) return idx; idx++; //weapon powerbeam-MK1
			if (moduleID == 1457521311) return idx; idx++; //weapon powerbeam-MK2
			if (moduleID == 876121604) return idx; idx++; //weapon powerbeam-MK3
			if (moduleID == 30426038) return idx; idx++; //weapon spideraa triplelaser
			if (moduleID == 1999515951) return idx; idx++; //weapon spideraa quadlaser
			if (moduleID == 848686115) return idx; idx++; //weapon insectoid fast laser
			if (moduleID == 849984806) return idx; idx++; //weapon Insectoid slowlaser
			//Heat Rays
			if (moduleID == 981179656) return idx; idx++; //weapon DIY raygun orange
			if (moduleID == 414020778) return idx; idx++; //weapon babylaser 1
			if (moduleID == 995420485) return idx; idx++; //weapon babylaser 2
			if (moduleID == 1576820192) return idx; idx++; //weapon babylaser 3
			if (moduleID == 1307272377) return idx; idx++; //weapon Heatray emitter
			if (moduleID == 728051246) return idx; idx++; //weapon Squid beamer heatray
			if (moduleID == 200034057) return idx; idx++; //weapon heavy energy ray
			if (moduleID == 1322541741) return idx; idx++; //weapon Heatray emitter x red
			//Disruptors
			if (moduleID == 1386212334) return idx; idx++; //weapon DIY raygun blue
			if (moduleID == 708268486) return idx; idx++; //weapon DIY EMP
			if (moduleID == 1249253086) return idx; idx++; //weapon dual EMP
			if (moduleID == 1403294598) return idx; idx++; //weapon DIY exotics EMP sniper
			if (moduleID == 2067779357) return idx; idx++; //weapon Insectoid shield disruptor
			if (moduleID == 1411264531) return idx; idx++; //weapon spideraa disruptor
			if (moduleID == 1535460222) return idx; idx++; //weapon Squid beamer EMP
			if (moduleID == 1317545673) return idx; idx++; //weapon rare warp shield breaker EMP
			//Radiation Accelerators
			if (moduleID == 144623758) return idx; idx++; //weapon DIY raygun
			if (moduleID == 176876935) return idx; idx++; //weapon bigbeamer1
			if (moduleID == 176876934) return idx; idx++; //weapon bigbeamer2
			if (moduleID == 176876933) return idx; idx++; //weapon bigbeamer3
			if (moduleID == 629170598) return idx; idx++; //weapon black energy laser x2
			if (moduleID == 599402385) return idx; idx++; //weapon Florallaser
			if (moduleID == 1210570305) return idx; idx++; //weapon black energy laser x3
			if (moduleID == 1238435842) return idx; idx++; //weapon BFGx9 for bluestar
			//Particle Disintegrators
			if (moduleID == 2075523594) return idx; idx++; //weapon DIY exoticslaser
			if (moduleID == 1049561624) return idx; idx++; //weapon DIY exoticslaser dual
			if (moduleID == 1356678884) return idx; idx++; //weapon Squid beamer single
			if (moduleID == 1281152896) return idx; idx++; //weapon Squid beamer double
			if (moduleID == 1028495088) return idx; idx++; //weapon Squid warp ray effector
			if (moduleID == 1433969244) return idx; idx++; //weapon rarelaserblue1
			if (moduleID == 1433969243) return idx; idx++; //weapon rarelaserblue2
			if (moduleID == 68261259) return idx; idx++; //weapon rarelaserblue2 dual
			if (moduleID == 737829770) return idx; idx++; //weapon spideraa laser
			if (moduleID == 842752468) return idx; idx++; //weapon rarelasergothic small
			if (moduleID == 452279033) return idx; idx++; //weapon rarelasergothic
			return idx + 100;
		}
		public static void UpdateWeaponModule(ShipModule shipModule, bool initItemData) {
			string colorRocketLan = "ff0000";
			string colorExplosive = "ffc000";
			string colorKinetic = "add8e6";
			string colorPlasma = "0080ff";
			string colorIncendiary = "ff8040";
			string colorCorrosive = "008000";
			string colorExotical = "8060ff";
			string colorLaserEmt = "ffff60";
			string colorBeamEmt = "ff9060";
			string colorHeatRay = "ff6060";
			string colorEnergyRay = "0090ff";
			string colorRadAccel = "008000";
			string colorExoticRay = "9060ff";
			shipModule.Weapon.resourcesPerShot = new ResourceValueGroup();
			int shipModule_maxHealth = AccessTools.FieldRefAccess<ShipModule, int>(shipModule, "maxHealth");
			int shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = shipModule.Weapon.ProjectileOrBeamPrefab as Projectile != null ? AccessTools.FieldRefAccess<Projectile, int>(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile, "pointDefPriority") : 0;
			switch (shipModule.PrefabId) {
				case 821254137: //weapon DIY Rockets x1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Rust Jigsaw <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"Improvised makeshift rocket platform. Prints and launches rockets of exactly same awful quality as itself. Rockets have high impact effect, but lack guidance system completely.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 50f, metals = 700f, synthetics = 500f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 1f, metals = 2f, explosives = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.10f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketBasic;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket + 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 1.50f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 20;
				break;
				case 597713891: //weapon ratmissile x2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Dual Tundra <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"Rocket platform of questionable quality developed by Rat Empire. Prints and launches low-yield incendiary rockets that lack proper guidance system. Still better then nothing.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 150f, metals = 1000f, synthetics = 750f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 1f, metals = 1f, explosives = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketBasic;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 1.25f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 30;
				break;
				case 777119861: //weapon ratmissile x3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Triple Tundra <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"Rocket platform of questionable quality developed by Rat Empire. Prints and launches low-yield incendiary rockets that lack proper guidance system. Still better then nothing.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 1500f, synthetics = 1000f, exotics = 6f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 2f, metals = 2f, explosives = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketBasic;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 1.25f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 30;
				break;
				case 185094886: //weapon miscmissile x4
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Wild Rage <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"Rocket platform of questionable quality developed by unknown party. Prints and launches low-yield explosive rockets that lack proper guidance system. Mostly used by pirates, slavers and other misfits.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 300f, metals = 1700f, synthetics = 1200f, exotics = 6f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 3f, metals = 3f, explosives = 11f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketBasic;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 1.25f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 30;
				break;
				case 1975811673: //weapon emperormissile large x5
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Rapid Mirage <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"Commercial rocket platform that prints and launches fragile, rapid-firing rockets. Used to propel light unguided reactive projectiles at enemies of the corporation that breached unsigned copyright agreements.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 400f, metals = 2000f, synthetics = 1500f, exotics = 8f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 5f, metals = 5f, explosives = 15f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketFast;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 5;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 40;
				break;
				case 759200248: //weapon emperormissiles small x2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Heavy Mirage <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"Commercial rocket platform that prints and launches lightly armored rockets. Used to propel armored unguided reactive projectiles at enemies of the corporation that breached unsigned copyright agreements.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 400f, metals = 2000f, synthetics = 1500f, exotics = 8f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 3f, metals = 3f, explosives = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.10f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 2;
				shipModule.Weapon.shotInterval = 1.25f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 40;
				break;
				case 97880399: //weapon tigermissile x2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Micro-Seismic <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"Initially this rocket platform was designed for deep core mining operations, but its micro-seismic charges are just as good at shattering everything else, as at shattering asteroids.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 2500f, synthetics = 2000f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 2f, metals = 4f, explosives = 14f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 3;
				shipModule.Weapon.shotInterval = 1.00f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 40;
				break;
				case 7208646: //weapon alienmissile x5
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Swarm Wave <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"Great rapid-fire rocket platform with extraterrestrial aesthetic design. Prints and launches lightly armored explosive rockets. Uses well known, but greatly optimized built-in rocket printing mechanism..");
				shipModule.craftCost = new ResourceValueGroup { fuel = 600f, metals = 2800f, synthetics = 2200f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 2f, metals = 3f, explosives = 12f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.15f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 2;
				shipModule.Weapon.shotInterval = 0.60f;
				shipModule.Weapon.magazineSize = 5;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 40;
				break;
				case 1170008060: //weapon alienmissile x7
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Swarm Tide <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"Advanced rapid-fire rocket platform with extraterrestrial aesthetic design. Prints and launches lightly armored explosive rockets. Uses well known, but completely reworked built-in rocket printing mechanism.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 700f, metals = 3200f, synthetics = 2400f, exotics = 12f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 2f, metals = 4f, explosives = 15f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.15f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 2;
				shipModule.Weapon.shotInterval = 0.60f;
				shipModule.Weapon.magazineSize = 7;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 40;
				break;
				case 85351226: //weapon spideraamissilex3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Triple Ravager <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"A rocket platform of unknown origin that prints and launches armored biomechanical rockets. Built-in rocket printing mechanism uses unknown technology and encrypted designs.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 800f, metals = 3600f, synthetics = 2600f, exotics = 14f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 6f, fuel = 3f, metals = 5f, explosives = 18f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.40f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 3;
				shipModule.Weapon.shotInterval = 0.75f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 50;
				break;
				case 1473319987: //weapon spideraamissilex4
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Quad Ravager <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"A rocket platform of unknown origin that prints and launches armored biomechanical rockets. Built-in rocket printing mechanism uses unknown technology and encrypted designs.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 900f, metals = 4500f, synthetics = 3000f, exotics = 14f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 8f, fuel = 4f, metals = 6f, explosives = 24f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.40f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 3;
				shipModule.Weapon.shotInterval = 0.75f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 50;
				break;
				case 1517283306: //weapon capitalorockets x2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Bone Flayer <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"Specialized rocket platform that prints low-speed armored rockets that carry multiple flechette payloads. Extremely efficient against personnel, but not so much against everything else.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 4000f, synthetics = 3000f, exotics = 20f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 2f, metals = 2f, synthetics = 16f, explosives = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.05f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 18;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketSlow;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 8;
				shipModule.Weapon.shotInterval = 0.75f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 35;
				break;
				case 1348589878: //weapon monolith missile x1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Sub-Impactor <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"This platform of unknown origin prints super-solid metal monoliths with high-velocity rocket engines. The massive projectiles deal mostly kinetic damage and can't be deflected.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 4000f, synthetics = 3000f, exotics = 20f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 8f, metals = 16f, explosives = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 20;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 5;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketUltra;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 1.25f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 30;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 35;
				break;
				case 469527491: //weapon ancientrockets x3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Retaliator <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"Ancient exotic rocket battery. Prints and launches armored and dangerous miniature nuclear rockets that detonate on impact with all nuclear consequences. Held in high regard even to these days.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 5500f, synthetics = 3500f, exotics = 20f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, synthetics = 3f, explosives = 9f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketFast;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.50f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 35;
				break;
				case 1571322820: //weapon tigermissile large
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Launcher].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Annihilator <color=#{colorRocketLan}ff>Rocket</color> Launcher");
				shipModule.description = Core.TT($"Extremely powerful exotic rocket battery. Prints and launches heavily armored, but just as agile antimatter rockets that cause extreme structural, anti-personnel, modular and electromagnetic damage at point of impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1500f, metals = 7000f, synthetics = 5000f, exotics = 30f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 5f, synthetics = 5f, explosives = 9f, exotics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 16;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 16;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 8;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRocketFast;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 20f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRocket - 15;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 8;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 60;
				break;
				case 1780996798: //weapon DIY Minicannon ancient 2,3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = Core.TT($"Dead Weight <color=#{colorExplosive}ff>Burst</color> Autocannon");
				shipModule.description = Core.TT($"Improvised autocannon that was assembled from weapon spare parts according to ancient designs. Long reload, mediocre rate of fire and low accuracy make this weapon less then desirable.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 25f, metals = 250f, synthetics = 150f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 1f, explosives = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.40f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon + 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.30f;
				shipModule.Weapon.magazineSize = 6;
				shipModule.Weapon.accuracy = 13;
				shipModule.powerConsumed = 0;
				shipModule_maxHealth = 20;
				break;
				case 1363897257: //weapon gatling 01 ancient dual 14,4
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = Core.TT($"Old Enforcer <color=#{colorExplosive}ff>Burst</color> Autocannon");
				shipModule.description = Core.TT($"Ancient autocannon that was designed centuries ago and served as loyal companion in many battles through the history. Has improved rate of fire, but still troubled with long reload and low accuracy.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 50f, metals = 400f, synthetics = 250f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 1f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.40f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon + 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.25f;
				shipModule.Weapon.magazineSize = 8;
				shipModule.Weapon.accuracy = 13;
				shipModule.powerConsumed = 0;
				shipModule_maxHealth = 25;
				break;
				case 1957651014: //weapon gatling 02 rat small 12,4
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = Core.TT($"Dual Bridge <color=#{colorExplosive}ff>Burst</color> Autocannon");
				shipModule.description = Core.TT($"Autocannon designed by Rat Empire and based on multiple designs of other ancient weapons. Loved by rat admirals for high capacity. Has improved rate of fire and improved accuracy, but still long reload.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 100f, metals = 600f, synthetics = 400f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 1f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon + 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.20f;
				shipModule.Weapon.magazineSize = 12;
				shipModule.Weapon.accuracy = 14;
				shipModule.powerConsumed = 0;
				shipModule_maxHealth = 35;
				break;
				case 704483685: //weapon gatling RatA 14,4
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = Core.TT($"Dual Spitter <color=#{colorExplosive}ff>Burst</color> Autocannon");
				shipModule.description = Core.TT($"Higher caliber autocannon designed by Rat Empire. Was developed after through research original ancient autocannons. Although higher caliber reduces rate of fire, it grants greater are of effect on impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 150f, metals = 800f, synthetics = 500f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon + 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.22f;
				shipModule.Weapon.magazineSize = 6;
				shipModule.Weapon.accuracy = 14;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 30;
				break;
				case 123083978: //weapon gatling RatB 15,5
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = Core.TT($"Triple Spitter <color=#{colorExplosive}ff>Burst</color> Autocannon");
				shipModule.description = Core.TT($"Heavier version of high caliber autocannon designed by Rat Empire. Integration of additional barrel increases size of consecutive salvo, while not affecting negatively other properties such as rate of fire.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 200f, metals = 1000f, synthetics = 600f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon + 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.20f;
				shipModule.Weapon.magazineSize = 9;
				shipModule.Weapon.accuracy = 14;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 30;
				break;
				case 1092529672: //weapon gatling whiteA 13,4
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = Core.TT($"Blizzard <color=#{colorExplosive}ff>Burst</color> Autocannon");
				shipModule.description = Core.TT($"A modern rotary autocannon developed by Terran Federation for highly intensive combat zones. Has good rate of fire, improved targeting system that grants better accuracy, but average area of effect on impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 275f, metals = 1300f, synthetics = 750f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.17f;
				shipModule.Weapon.magazineSize = 8;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 40;
				break;
				case 689245145: //weapon gatling whiteB 14,5
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = Core.TT($"Hailstorm <color=#{colorExplosive}ff>Burst</color> Autocannon");
				shipModule.description = Core.TT($"This modern rotary autocannon has upgraded ignition chamber that increases amount of shots that it can do before cooling reagent is used up. Greater projectile density reduces risk of full interception by CIWS.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 350f, metals = 1600f, synthetics = 900f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.17f;
				shipModule.Weapon.magazineSize = 12;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 40;
				break;
				case 698348090: //weapon Sniper cannon 4
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.2f);
				shipModule.displayName = Core.TT($"Whirlwind <color=#{colorExplosive}ff>Burst</color> Autocannon");
				shipModule.description = Core.TT($"Advanced high caliber quad-barreled autocannon has immense projectile density, while keeping original specs of high caliber autocannons such as effective impact area, proper cooling speed and stable ignition chamber.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 2400f, synthetics = 1600f, exotics = 6f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.15f;
				shipModule.Weapon.magazineSize = 16;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 40;
				break;
				case 1501025877: //weapon gatling ClawA 12,4
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"Gauss Claw <color=#{colorKinetic}ff>Kinetic</color> Autocannon");
				shipModule.description = Core.TT($"This autocannon uses gauss coils acceleration technology to launch dense metallic projectiles with immense velocity at enemy ships. At expense of high energy and metal consumption its projectiles ignore armor deflection.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 450f, metals = 2000f, synthetics = 1400f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonGauss;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.17f;
				shipModule.Weapon.magazineSize = 8;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 45;
				break;
				case 1566651491: //weapon gatling ClawB 14,5
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"Gauss Talon <color=#{colorKinetic}ff>Kinetic</color> Autocannon");
				shipModule.description = Core.TT($"A gauss autocannon that is upgraded with second barrel, which allows it to reduce strain on initial barrel and at the same time increase projectile destiny, while slightly increasing energy and metal consumption.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 600f, metals = 3000f, synthetics = 2000f, exotics = 6f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonGauss;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.17f;
				shipModule.Weapon.magazineSize = 12;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 45;
				break;
				case 1890403578: //weapon gatling blaster small 12,5
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = Core.TT($"Buckingham <color=#{colorPlasma}ff>Plasma</color> Autocannon");
				shipModule.description = Core.TT($"An energy autocannon that consumes certain amount of fuel, which is passed through high voltage cyclotron that turns it into high emission energy projectiles that never deflect, but also incapable of ignoring shields.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 450f, metals = 2000f, synthetics = 2500f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonFast;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.20f;
				shipModule.Weapon.magazineSize = 8;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 4;
				shipModule_maxHealth = 40;
				break;
				case 992516328: //weapon gatling Insectoid plasma 18,4x2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = Core.TT($"Tranquility <color=#{colorPlasma}ff>Plasma</color> Autocannon");
				shipModule.description = Core.TT($"Advanced energy autocannon that has bigger high voltage cyclotron chamber that can process even more fuel at once in order to turn it into projectiles. It also has better particle accelerator that increases launch speed.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 600f, metals = 3000f, synthetics = 4000f, exotics = 6f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonFast;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.15f;
				shipModule.Weapon.magazineSize = 12;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 35;
				break;
				case 458272126: //weapon gatling Insectoid cyano 15,4
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Corrosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Corrosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"Carnage Venom <color=#{colorCorrosive}ff>Acid</color> Autocannon");
				shipModule.description = Core.TT($"Specialized autocannon that shots highly acidic and corrosive projectiles with great area of effect that do immense damage to the crew of the targeted ship. Production of specialized corrosion reagents requires exotics.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 2500f, synthetics = 5000f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 10f, metals = 2f, synthetics = 2f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.17f;
				shipModule.Weapon.magazineSize = 8;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 35;
				break;
				case 797718711: //weapon weirdship gatling
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Autocannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Antimatter].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Antimatter].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"Euphoria <color=#{colorExotical}ff>Exotic</color> Autocannon");
				shipModule.description = Core.TT($"Suppressive autocannon that shots huge amount of projectiles that allow to bypass even most advanced CIWS. Built-in printer requires exotic matter in order to produce enough ammunition withing limited time frame.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 3000f, synthetics = 6000f, exotics = 20f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 6f, synthetics = 6f, exotics = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedAutocannonNormal;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).selfDestructTime = 10f;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 3;
				shipModule.Weapon.reloadInterval = reloadProjAutocannon + 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.05f;
				shipModule.Weapon.magazineSize = 42;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 30;
				break;
				case 1521997681: //weapon ATK-MK1 old
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"F1-Bushwacker <color=#{colorExplosive}ff>Explosive</color> Howitzer");
				shipModule.description = Core.TT($"Ancient single-barreled artillery weapon that was developed and often applied in conventional warfare centuries ago. Rusty, has faulty ammo printing mechanism and expired reloading mechanism.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 50f, metals = 500f, synthetics = 400f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.9f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 35;
				break;
				case 1118713154: //weapon ATK-MK2 old
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"F2-Bushwacker <color=#{colorExplosive}ff>Explosive</color> Howitzer");
				shipModule.description = Core.TT($"Ancient double-barreled artillery weapon that was developed and often applied in conventional warfare centuries ago. Rusty, has faulty ammo printing mechanism and expired reloading mechanism.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 75f, metals = 700f, synthetics = 550f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, explosives = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.7f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 40;
				break;
				case 537313447: //weapon ATK-MK3 old
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"F3-Bushwacker <color=#{colorExplosive}ff>Explosive</color> Howitzer");
				shipModule.description = Core.TT($"Ancient triple-barreled artillery weapon that was developed and often applied in conventional warfare centuries ago. Rusty, has faulty ammo printing mechanism and expired reloading mechanism.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 100f, metals = 900f, synthetics = 700f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 4f, explosives = 9f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer + 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.5f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 45;
				break;
				case 1281856982: //weapon ATK-MK1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"S1-Rebellion <color=#{colorExplosive}ff>Explosive</color> Howitzer");
				shipModule.description = Core.TT($"Modern version of ancient single-barreled artillery weapon that was developed centuries ago. Has upgraded targeting system, pristine ammo printing mechanism and extremely optimized reloading system.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 200f, metals = 1500f, synthetics = 1000f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 20f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.8f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 50;
				break;
				case 1685141509: //weapon ATK-MK2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"S2-Rebellion <color=#{colorExplosive}ff>Explosive</color> Howitzer");
				shipModule.description = Core.TT($"Modern version of ancient double-barreled artillery weapon that was developed centuries ago. Has upgraded targeting system, pristine ammo printing mechanism and extremely optimized reloading system.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 225f, metals = 1650f, synthetics = 1100f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, explosives = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.6f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 55;
				break;
				case 119057568: //weapon ATK-MK3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"S3-Rebellion <color=#{colorExplosive}ff>Explosive</color> Howitzer");
				shipModule.description = Core.TT($"Modern version of ancient triple-barreled artillery weapon that was developed centuries ago. Has upgraded targeting system, pristine ammo printing mechanism and extremely optimized reloading system.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 1800f, synthetics = 1200f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 4f, explosives = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 4;
				shipModule.Weapon.shotInterval = 0.4f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 60;
				break;
				case 1675488140: //weapon cubecannon huge old
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"Detonator <color=#{colorExplosive}ff>Explosive</color> Howitzer");
				shipModule.description = Core.TT($"Ancient huge artillery weapon that fires oversized projectiles with extremely volatile payload. Degraded printing mechanism no longer prints proper projectiles, but still consumes a lot of resources.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 150f, metals = 1200f, synthetics = 900f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, explosives = 10f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.20f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 11;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 6;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer + 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 6;
				shipModule.Weapon.shotInterval = 1.1f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 1;
				shipModule_maxHealth = 50;
				break;
				case 114834467: //weapon cubecannon huge
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"Devastator <color=#{colorExplosive}ff>Explosive</color> Howitzer");
				shipModule.description = Core.TT($"Modern version of ancient huge artillery weapon. Has same ammo caliber as original, but due to optimized payload distribution algorithm and upgraded targeting system, has greater impact power and accuracy. ");
				shipModule.craftCost = new ResourceValueGroup { fuel = 300f, metals = 2000f, synthetics = 1500f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, explosives = 12f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.20f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 20;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 9;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer + 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 6;
				shipModule.Weapon.shotInterval = 0.9f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 70;
				break;
				case 865561327: //weapon emperorbanks cannon1x
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"X1-Coercer <color=#{colorExplosive}ff>Explosive</color> Howitzer");
				shipModule.description = Core.TT($"Commercial single-barreled artillery weapon that relies on optimal use of explosives to print and propel large high impact projectiles at enemies of the corporation that breached unsigned copyright agreements.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 275f, metals = 2000f, synthetics = 1300f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 5;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 20f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 5;
				shipModule.Weapon.shotInterval = 0.7f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 50;
				break;
				case 865561324: //weapon emperorbanks cannon2x
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"X2-Coercer <color=#{colorExplosive}ff>Explosive</color> Howitzer");
				shipModule.description = Core.TT($"Commercial double-barreled artillery weapon that relies on optimal use of explosives to print and propel large high impact projectiles at enemies of the corporation that breached unsigned copyright agreements.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 325f, metals = 2400f, synthetics = 1600f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, explosives = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 5;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 5;
				shipModule.Weapon.shotInterval = 0.5f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 60;
				break;
				case 533548711: //weapon emperorbanks cannon large
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.4f);
				shipModule.displayName = Core.TT($"Scarlet Dawn <color=#{colorExplosive}ff>Explosive</color> Howitzer");
				shipModule.description = Core.TT($"Commercial high-caliber artillery weapon that relies on abundant use of explosives to print and propel massive, almost nuke-sized projectiles at enemies of the corporation that breached unsigned copyright agreements.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 400f, metals = 3000f, synthetics = 2200f, exotics = 6f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 4f, explosives = 16f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.30f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 18;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 25;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 12;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 8;
				shipModule.Weapon.shotInterval = 0.9f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 80;
				break;
				case 887190895: //weapon ratcannon high velocity
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = Core.TT($"Perforator <color=#{colorKinetic}ff>Kinetic</color> Howitzer");
				shipModule.description = Core.TT($"The pinnacle of Rat Empire's technological development and creativity. This weapon prints and propels specialized non-deflecting projectiles with perforation cone that drill through hull on impact and explode inside.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 3000f, synthetics = 2500f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 6f, explosives = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 6;
				shipModule.Weapon.shotInterval = 0.9f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 50;
				break;
				case 1662502911: //weapon ratcannon fire1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Incendiary].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Incendiary].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = Core.TT($"R1-Fireball <color=#{colorIncendiary}ff>Incendiary</color> Howitzer");
				shipModule.description = Core.TT($"A single-barreled area denial weapon developed by Rat Empire. Prints and launches incendiary bombs filled with flammable mixture. Incendiary bombs are very fragile in nature thus can be easily intercepted by any CIWS.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 350f, metals = 1500f, synthetics = 2000f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 4f, metals = 1f, explosives = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.05f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.9f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 35;
				break;
				case 2065787438: //weapon ratcannon fire2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Incendiary].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Incendiary].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = Core.TT($"R2-Fireball <color=#{colorIncendiary}ff>Incendiary</color> Howitzer");
				shipModule.description = Core.TT($"A double-barreled area denial weapon developed by Rat Empire. Prints and launches incendiary bombs filled with flammable mixture. Incendiary bombs are very fragile in nature thus can be easily intercepted by any CIWS.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 450f, metals = 1800f, synthetics = 2500f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 6f, metals = 2f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.05f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer + 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.7f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 40;
				break;
				case 499703497: //weapon ratcannon fire3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Incendiary].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Incendiary].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = Core.TT($"R3-Fireball <color=#{colorIncendiary}ff>Incendiary</color> Howitzer");
				shipModule.description = Core.TT($"A triple-barreled area denial weapon developed by Rat Empire. Prints and launches incendiary bombs filled with flammable mixture. Incendiary bombs are very fragile in nature thus can be easily intercepted by any CIWS.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 550f, metals = 2200f, synthetics = 3000f, exotics = 6f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 8f, metals = 3f, explosives = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.05f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer + 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 1;
				shipModule.Weapon.shotInterval = 0.5f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 45;
				break;
				case 30747850: //weapon diyfirebomber1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Incendiary].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Incendiary].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = Core.TT($"Blazefire <color=#{colorIncendiary}ff>Incendiary</color> Howitzer");
				shipModule.description = Core.TT($"Advanced double-cartridge area denial weapon that was developed by Black Market specialists. Prints and launches lightly armored incendiary bombs filled with extremely flammable, but solid compound that auto-ignites on impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 2500f, synthetics = 3000f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 6f, metals = 2f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.35f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 2;
				shipModule.Weapon.shotInterval = 0.7f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 40;
				break;
				case 30747849: //weapon diyfirebomber2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Incendiary].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Incendiary].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = Core.TT($"Firestorm <color=#{colorIncendiary}ff>Incendiary</color> Howitzer");
				shipModule.description = Core.TT($"Advanced quadrupole-cartridge area denial weapon that was developed by Black Market specialists. Prints and launches lightly armored incendiary bombs filled with extremely flammable, but solid compound that auto-ignites on impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 3000f, synthetics = 3500f, exotics = 8f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 10f, metals = 4f, explosives = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.35f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 2;
				shipModule.Weapon.shotInterval = 0.5f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 50;
				break;
				case 1532741738: //weapon Energy cannon x1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.2f);
				shipModule.displayName = Core.TT($"Light Quasar <color=#{colorPlasma}ff>Plasma</color> Howitzer");
				shipModule.description = Core.TT($"A simple, yet effective electromagnetic pulse cannon that ejects highly energized projectiles that can't be deflected. Overloads shields and disrupts working modules. May start fires and shock crew on direct hull impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 1500f, synthetics = 2000f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 4f, synthetics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 20;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 20;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 60;
				break;
				case 1532741737: //weapon Energy cannon x2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.2f);
				shipModule.displayName = Core.TT($"Heavy Quasar <color=#{colorPlasma}ff>Plasma</color> Howitzer");
				shipModule.description = Core.TT($"A simple, yet effective dual-barreled electromagnetic pulse cannon that ejects highly energized projectiles that can't be deflected. Overloads shields and disrupts working modules. May start fires and shock crew on direct hull impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 2000f, synthetics = 2500f, exotics = 6f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 5f, synthetics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 60;
				break;
				case 1768012478: //weapon Energy cannon OP
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.2f);
				shipModule.displayName = Core.TT($"Neutron Quasar <color=#{colorPlasma}ff>Plasma</color> Howitzer");
				shipModule.description = Core.TT($"A simple, yet effective overcharged electromagnetic pulse cannon that ejects highly energized projectiles that can't be deflected. Overloads shields and disrupts working modules. May start fires and shock crew on direct hull impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 2500f, synthetics = 3000f, exotics = 8f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 5f, synthetics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 40;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 40;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 20;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 60;
				break;
				case 1482677315: //weapon EMP energyball
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.2f);
				shipModule.displayName = Core.TT($"System Shock <color=#{colorPlasma}ff>Plasma</color> Howitzer");
				shipModule.description = Core.TT($"A powerful electromagnetic pulse cannon that ejects high-intensity energized projectiles that can't be deflected. Greatly overloads shields and disrupts working modules. May start fires and shock crew on direct hull impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 3000f, synthetics = 4000f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 4f, synthetics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 48;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 24;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 6;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 50;
				break;
				case 876704941: //weapon EMP energyball 3x Tiger
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.2f);
				shipModule.displayName = Core.TT($"Shockwave <color=#{colorPlasma}ff>Plasma</color> Howitzer");
				shipModule.description = Core.TT($"An extremely powerful triple-barreled electromagnetic pulse cannon that ejects high-intensity energized projectiles that can't be deflected. Greatly overloads shields and disrupts working modules. May start fires and shock crew on direct hull impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1500f, metals = 4000f, synthetics = 5000f, exotics = 14f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 6f, synthetics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 32;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 16;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = false;
				shipModule.Weapon.overrideProjectileHealth = 0;
				shipModule.Weapon.shotInterval = 0.50f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 15;
				shipModule_maxHealth = 50;
				break;
				case 1519934886: //weapon babycannon1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Corrosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Corrosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = Core.TT($"Monoxide <color=#{colorCorrosive}ff>Corrosive</color> Howitzer");
				shipModule.description = Core.TT($"Anti-armor corrosive cannon of unknown origin. Consumes mainly organics and other materials to print and launch fragile, but highly corrosive projectiles that melt matter and dissolve organics in decent radius on impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 2250f, synthetics = 1000f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 6f, synthetics = 1f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.15f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 8;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 2;
				shipModule.Weapon.shotInterval = 0.75f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 2;
				shipModule_maxHealth = 35;
				break;
				case 357135472: //weapon babycannon3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Corrosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Corrosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = Core.TT($"Dihydrogen <color=#{colorCorrosive}ff>Corrosive</color> Howitzer");
				shipModule.description = Core.TT($"Anti-armor corrosive multi-cannon of unknown origin. Consumes mainly organics and other materials to print and launch fragile, but highly corrosive projectiles that melt matter and dissolve organics in decent radius on impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 900f, metals = 3500f, synthetics = 2000f, exotics = 7f};
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 9f, synthetics = 2f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 7;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 2;
				shipModule.Weapon.shotInterval = 0.45f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 4;
				shipModule_maxHealth = 45;
				break;
				case 790917823: //weapon Floral cannon
				if (initItemData) ProcessDLC.ApplySectorViablility(shipModule.PrefabId);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Corrosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Corrosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.6f);
				shipModule.displayName = Core.TT($"Dissolution <color=#{colorCorrosive}ff>Corrosive</color> Howitzer");
				shipModule.description = Core.TT($"Anti-armor molecular acid cannon of organic origin. Consumes mainly organics and other materials to print and launch decently armored, highly corrosive projectiles that melt matter and dissolve organics in huge radius on impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 1000f, synthetics = 2000f, exotics = 10f, organics = 4000f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 12f, synthetics = 3f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 15;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerNormal;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 5;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 55;
				break;
				case 605446971: //weapon hi-tec cannon
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Antimatter].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Antimatter].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Hollow Point <color=#{colorExotical}ff>Antimatter</color> Howitzer");
				shipModule.description = Core.TT($"Specialized weapon developed by force from far, far away galaxy. Pints and launches chunks of extremely durable, but volatile material that uses destabilized exotic matter as catalyst. Nearly perfect weapon, except very expensive to use.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 4250f, synthetics = 5750f, exotics = 30f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, synthetics = 2f, explosives = 5f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 25;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 21;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 12;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 20;
				shipModule.Weapon.shotInterval = 1.05f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 40;
				break;
				case 1983239915: //weapon exoticscannon1
				if (initItemData) ProcessDLC.ApplySectorViablility(shipModule.PrefabId);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Howitzer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Antimatter].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Antimatter].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 1.8f);
				shipModule.displayName = Core.TT($"Para Bellum <color=#{colorExotical}ff>Antimatter</color> Howitzer");
				shipModule.description = Core.TT($"Experimental weapon that pints and launches chunks of extremely durable, but volatile material that uses destabilized exotic matter as catalyst. Volatile energy that released on impact will destroy and disrupt everything in the area of effect.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1500f, metals = 5000f, synthetics = 7000f, exotics = 40f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 4f, synthetics = 2f, explosives = 6f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 25;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 35;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 15;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedHowitzerFast;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjHowitzer - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = ProcessDLC.GetProjectileHealth(shipModule.PrefabId);
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 45;
				break;
				case 1751631045: //weapon Sniper cannon 0 DIY
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = Core.TT($"Dead Eye <color=#{colorKinetic}ff>Kinetic</color> Railgun");
				shipModule.description = Core.TT($"Light linear acceleration weapon that was assembled from spare parts and extra energy cores. Prints and launches fragile high velocity kinetic projectiles that penetrate shields and armor, while doing extra damage to modules.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 100f, metals = 600f, synthetics = 200f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun + 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.8f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 25;
				break;
				case 514626098: //weapon Sniper cannon 0
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = Core.TT($"H1-Redeemer <color=#{colorExplosive}ff>Explosive</color> Railgun");
				shipModule.description = Core.TT($"Light single-barreled linear acceleration weapon that was developed by Terran Federation. Prints and launches fragile high velocity projectiles with explosive detonating cores that are extra effective against modules.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 450f, metals = 2000f, synthetics = 900f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 1f, explosives = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.8f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 35;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 35;
				break;
				case 1499937036: //weapon Sniper cannon 2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = Core.TT($"H2-Redeemer <color=#{colorExplosive}ff>Explosive</color> Railgun");
				shipModule.description = Core.TT($"Light double-barreled linear acceleration weapon that was developed by Terran Federation. Prints and launches fragile high velocity projectiles with explosive detonating cores that are extra effective against modules.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 600f, metals = 2500f, synthetics = 1200f, exotics = 6f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 2f, explosives = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.6f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 35;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 40;
				break;
				case 918537329: //weapon Sniper cannon 3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Explosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = Core.TT($"H3-Redeemer <color=#{colorExplosive}ff>Explosive</color> Railgun");
				shipModule.description = Core.TT($"Light triple-barreled linear acceleration weapon that was developed by Terran Federation. Prints and launches fragile high velocity projectiles with explosive detonating cores that are extra effective against modules.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 3000f, synthetics = 1500f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f, explosives = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.4f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 35;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 45;
				break;
				case 1240034396: //weapon Sniper cannon 2 insectoid
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = Core.TT($"Rheinmetall <color=#{colorKinetic}ff>Kinetic</color> Railgun");
				shipModule.description = Core.TT($"Light linear acceleration weapon that was developed by Black Market specialists. Prints and launches lightly armored high velocity projectiles with extra heavy and durable core that does extreme damage to the modules.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 875f, metals = 3500f, synthetics = 1750f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.6f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 35;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 45;
				break;
				case 1567764648: //weapon sniper cannon EMP
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Plasma].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = Core.TT($"Suppressor <color=#{colorPlasma}ff>Disruptor</color> Railgun");
				shipModule.description = Core.TT($"Light linear acceleration weapon that was developed by Black Market specialists. Prints and launches lightly armored high velocity projectiles that release short electric impulse that disrupts modules and shocks crew on impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 875f, metals = 3500f, synthetics = 1750f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 1f, synthetics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 60;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.6f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 35;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 45;
				break;
				case 985673324: //weapon Spideraa shuriken
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Corrosive].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Corrosive].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = Core.TT($"Flechette <color=#{colorCorrosive}ff>Corrosive</color> Railgun");
				shipModule.description = Core.TT($"Light linear acceleration weapon that was developed by unknown force. Prints and launches lightly armored high velocity projectiles that release flechette coated by extremely toxic anti-personnel reagents on impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 875f, metals = 3500f, synthetics = 1750f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 2f, metals = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 10;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 10;
				shipModule.Weapon.shotInterval = 0.6f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 35;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 45;
				break;
				case 1627732855: //weapon rapid cannon
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railgun].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Antimatter].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Antimatter].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.0f);
				shipModule.displayName = Core.TT($"Sunstorm <color=#{colorExotical}ff>Antimatter</color> Railgun");
				shipModule.description = Core.TT($"Technologically advanced light linear acceleration weapon. Prints and launches moderately armored high velocity projectiles that release high-performance volatile exotic substance on impact with catastrophic consequences.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 4500f, synthetics = 2500f, exotics = 20f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.15f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 10;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 1;
				shipModule.Weapon.reloadInterval = reloadProjRailgun - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 15;
				shipModule.Weapon.shotInterval = 0.6f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 35;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 60;
				break;
				case 1316645801: //weapon cubecannon1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = Core.TT($"B1-Partisan <color=#{colorKinetic}ff>Kinetic</color> Railcannon");
				shipModule.description = Core.TT($"Ancient single-barreled heavy linear acceleration weapon that was developed by civilization long gone. Prints and launches armored projectiles at high velocities that rip everything apart in their way, be it hull or modules.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 2000f, synthetics = 1150f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 12;
				shipModule.Weapon.shotInterval = 0.8f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 50;
				break;
				case 1615383632: //weapon cubecannon1x3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = Core.TT($"B3-Partisan <color=#{colorKinetic}ff>Kinetic</color> Railcannon");
				shipModule.description = Core.TT($"Ancient triple-barreled heavy linear acceleration weapon that was developed by civilization long gone. Prints and launches armored projectiles at high velocities that rip everything apart in their way, be it hull or modules.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 3000f, synthetics = 1750f, exotics = 6f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailgun;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 12;
				shipModule.Weapon.shotInterval = 0.5f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 60;
				break;
				case 894416346: //weapon Segmented cannon1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = Core.TT($"Salvation <color=#{colorKinetic}ff>Kinetic</color> Railcannon");
				shipModule.description = Core.TT($"Modern single-cartridge heavy linear acceleration weapon that was developed by Terran Federation. Prints and launches heavily armored kinetic projectiles at extreme velocities that are followed by extremely destructive inversion waves.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 2500f, synthetics = 1500f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailcannon;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon - 15f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 15;
				shipModule.Weapon.shotInterval = 1.0f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 45;
				break;
				case 1086561638: //weapon Segmented cannonx2 A
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = Core.TT($"Atonement <color=#{colorKinetic}ff>Kinetic</color> Railcannon");
				shipModule.description = Core.TT($"Modern double-cartridge heavy linear acceleration weapon that was developed by Terran Federation. Prints and launches heavily armored kinetic projectiles at extreme velocities that are followed by extremely destructive inversion waves.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 3500f, synthetics = 2000f, exotics = 8f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailcannon;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon - 10f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 15;
				shipModule.Weapon.shotInterval = 0.8f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 50;
				break;
				case 1086561639: //weapon Segmented cannonx2 B
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = Core.TT($"Repentance <color=#{colorKinetic}ff>Kinetic</color> Railcannon");
				shipModule.description = Core.TT($"Modern triple-cartridge heavy linear acceleration weapon that was developed by Terran Federation. Prints and launches heavily armored kinetic projectiles at extreme velocities that are followed by extremely destructive inversion waves.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 4500f, synthetics = 2500f, exotics = 12f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailcannon;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon - 5f;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 15;
				shipModule.Weapon.shotInterval = 0.6f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 55;
				break;
				case 1086561640: //weapon Segmented cannonx2 C
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = Core.TT($"Redemption <color=#{colorKinetic}ff>Kinetic</color> Railcannon");
				shipModule.description = Core.TT($"Modern quadruple-cartridge heavy linear acceleration weapon that was developed by Terran Federation. Prints and launches heavily armored kinetic projectiles at extreme velocities that are followed by extremely destructive inversion waves.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 5500f, synthetics = 3000f, exotics = 16f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 10f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailcannon;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 15;
				shipModule.Weapon.shotInterval = 0.4f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 60;
				break;
				case 412909021: //weapon gatling Tiger
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Railcannon].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Contains(shipModule.PrefabId)) FFU_BE_Defs.cannonTypeIDs[Core.CannonType.Kinetic].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 2.4f);
				shipModule.displayName = Core.TT($"Liberator <color=#{colorKinetic}ff>Kinetic</color> Railcannon");
				shipModule.description = Core.TT($"A pinnacle of human creativity in linear acceleration weaponry: belt-fed rotary multi-barreled railcannon. Prints and launches heavily armored kinetic projectiles at extreme velocities that are followed by extremely destructive inversion waves.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1500f, metals = 6000f, synthetics = 3500f, exotics = 20f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { metals = 10f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile).speed = prjSpeedRailcannon;
				shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority = 2;
				shipModule.Weapon.reloadInterval = reloadProjRailcannon - 10;
				shipModule.Weapon.overridePointDefCanSeeThis = true;
				shipModule.Weapon.overrideProjectileHealth = 15;
				shipModule.Weapon.shotInterval = 0.2f;
				shipModule.Weapon.magazineSize = 6;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 20;
				shipModule_maxHealth = 80;
				break;
				case 842299308: //weapon mininglaser 0 old
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Ancient 1-Core <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Ancient mining laser that was designed centuries ago by first mining consortium. Its only redeeming feature that mined resources aren't damaged during extraction for asteroids.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 25f, metals = 100f, synthetics = 300f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser + 10f;
				shipModule.Weapon.shotInterval = 1.2f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 15;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 5;
				break;
				case 1386594796: //weapon mininglaser 0 defective
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Broken 3-Core <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Ancient mining laser that was designed centuries ago by first mining consortium. Initially had three emitters, but due to extensive usage and wear ended up with only one somewhat working emitter.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 25f, metals = 150f, synthetics = 300f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser + 10f;
				shipModule.Weapon.shotInterval = 1.0f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 13;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 4;
				break;
				case 1362762978: //weapon mininglaser 2 defective
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Broken 4-Core <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Ancient mining laser that was designed centuries ago by first mining consortium. Initially had four emitters, but due to extensive usage and wear ended up with only two somewhat working emitters.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 50f, metals = 300f, synthetics = 600f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser + 10f;
				shipModule.Weapon.shotInterval = 0.9f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 13;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 6;
				break;
				case 109007005: //weapon mininglaser 3 defective
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Broken 5-Core <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Ancient mining laser that was designed centuries ago by first mining consortium. Initially had five emitters, but due to extensive usage and wear ended up with only three somewhat working emitters.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 75f, metals = 450f, synthetics = 900f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser + 10f;
				shipModule.Weapon.shotInterval = 0.8f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 13;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 8;
				break;
				case 292919296: //weapon mininglaser 4 defective
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Broken 6-Core <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Ancient mining laser that was designed centuries ago by first mining consortium. Initially had six emitters, but due to extensive usage and wear ended up with only four somewhat working emitters.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 100f, metals = 600f, synthetics = 1200f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser + 10f;
				shipModule.Weapon.shotInterval = 0.7f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 13;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 10;
				break;
				case 1594290506: //weapon mininglaser 1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"1-Core Mining <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Modern mining laser that was designed by most famous mining consortium. Has one emitter with optimized capacitors. Beside being good for resource extraction doubles as decent self-defense measure.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 50f, metals = 200f, synthetics = 400f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.50f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 3;
				shipModule_maxHealth = 10;
				break;
				case 1191005979: //weapon mininglaser 2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"2-Core Mining <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Modern mining laser that was designed by most famous mining consortium. Has two emitters with optimized capacitors. Beside being good for resource extraction doubles as decent self-defense measure.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 100f, metals = 400f, synthetics = 800f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.40f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 4;
				shipModule_maxHealth = 15;
				break;
				case 609606272: //weapon mininglaser 3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"3-Core Mining <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Modern mining laser that was designed by most famous mining consortium. Has three emitters with optimized capacitors. Beside being good for resource extraction doubles as decent self-defense measure.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 150f, metals = 600f, synthetics = 1200f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 20;
				break;
				case 206321745: //weapon mininglaser 4
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"4-Core Mining <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Modern mining laser that was designed by most famous mining consortium. Has four emitters with optimized capacitors. Beside being good for resource extraction doubles as decent self-defense measure.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 200f, metals = 800f, synthetics = 1600f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.30f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 25;
				break;
				case 1772405686: //weapon mininglaser 5
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"5-Core Mining <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Modern mining laser that was designed by most famous mining consortium. Has five emitters with optimized capacitors. Beside being good for resource extraction doubles as decent self-defense measure.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 1000f, synthetics = 2000f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.25f;
				shipModule.Weapon.magazineSize = 5;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 30;
				break;
				case 1369121159: //weapon mininglaser 6
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"6-Core Mining <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Modern mining laser that was designed by most famous mining consortium. Has six emitters with optimized capacitors. Beside being good for resource extraction doubles as decent self-defense measure.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 300f, metals = 1200f, synthetics = 2400f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.2f;
				shipModule.Weapon.magazineSize = 6;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 35;
				break;
				case 1019707953: //weapon ratlaser 5
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Imperial Spike <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Initially mining laser that was redesigned by the Rat Empire into combat laser. Has five emitters with efficient capacitors. Still can be used for mining, but works better against compound alloys.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 325f, metals = 1000f, synthetics = 2000f, exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser - 5f;
				shipModule.Weapon.shotInterval = 0.15f;
				shipModule.Weapon.magazineSize = 5;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 40;
				break;
				case 1724240697: //weapon ratlaser small no armor
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Imperial Shiv <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Rapid fire combat laser that was developed by Rat Empire. Advanced capacitors decently increase damage output. Exposed internal components decrease durability of the weapon.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 400f, metals = 1500f, synthetics = 2500f, exotics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser + 5f;
				shipModule.Weapon.shotInterval = 0.25f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 35;
				break;
				case 1345622970: //weapon ratlaser small with armor
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Imperial Knife <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Rapid fire combat laser that was developed by Rat Empire. Advanced capacitors decently increase damage output. Heavy compound alloy plating increases durability of the weapon.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 475f, metals = 2000f, synthetics = 2500f, exotics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.20f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 50;
				break;
				case 474553624: //weapon emperor minilaser
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Light-Focused <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Commercial light combat laser with two emitters that was developed to punish breachers of unsigned copyright agreements. Equipped with manipulators to clean dead bodies from ship's exterior.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 350f, metals = 1200f, synthetics = 1600f, exotics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 25;
				break;
				case 1340539166: //weapon emperor laser double
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Heavy-Focused <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Commercial medium combat laser with two emitters that was developed to punish breachers of unsigned copyright agreements. Has no manipulators to clean exterior, but twice as dangerous.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 2500f, synthetics = 3000f, exotics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.25f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 30;
				break;
				case 681262058: //weapon emperor laser large
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Rapid-Focused <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Commercial rapid-fire combat laser with three emitters that was developed to punish breachers of unsigned copyright agreements. Perfect to deal with those who don't respect terms of service.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 3000f, synthetics = 3500f, exotics = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser;
				shipModule.Weapon.shotInterval = 0.15f;
				shipModule.Weapon.magazineSize = 9;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 35;
				break;
				case 109243084: //weapon Insectoid old fast laser
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Dual-Effector <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Tactical combat weapon with two emitters. Probably was developed by Black Market specialists. State-of-art targeting and capacitor units increase recharge speed and damage output.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 475f, metals = 1750f, synthetics = 2500f, exotics = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser - 5f;
				shipModule.Weapon.shotInterval = 0.25f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 30;
				break;
				case 2100491633: //weapon Insectoid old fast laser 5x
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Laser].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Quint-Effector <color=#{colorLaserEmt}ff>Laser</color> Emitter");
				shipModule.description = Core.TT($"Tactical combat weapon with five emitters. Probably was developed by Black Market specialists. State-of-art targeting and capacitor units increase recharge speed and damage output.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 2750f, synthetics = 3750f, exotics = 7f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 0;
				shipModule.Weapon.reloadInterval = reloadBeamLaser - 5f;
				shipModule.Weapon.shotInterval = 0.25f;
				shipModule.Weapon.magazineSize = 5;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 40;
				break;
				case 55650103: //weapon DIY Laser
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.0f);
				shipModule.displayName = Core.TT($"Scrap Cutter <color=#{colorBeamEmt}ff>Beam</color> Emitter");
				shipModule.description = Core.TT($"Improvised beam weapon whose design was based on famous Terran weapon and optimized for production and assembly in low-resource conditions. Still better then nothing at all.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 50f, metals = 200f, synthetics = 350f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 1;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy;
				shipModule.Weapon.shotInterval = 1.00f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 4;
				shipModule_maxHealth = 10;
				break;
				case 1281020726: //weapon ratlaser short
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = Core.TT($"Deathly Tail <color=#{colorBeamEmt}ff>Beam</color> Emitter");
				shipModule.description = Core.TT($"A robust military beam emitter designed in Rat Empire. Has good damage output, but still uses old recharging mechanism. Cheap in maintenance as any other rat equipment.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 200f, metals = 500f, synthetics = 1000f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 30;
				break;
				case 1447130390: //weapon ratlaser long
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = Core.TT($"Killer Fang <color=#{colorBeamEmt}ff>Beam</color> Emitter");
				shipModule.description = Core.TT($"A robust military beam emitter designed in Rat Empire. Has good damage output, but still uses old recharging mechanism. Upgraded with additional charge emission coils.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 800f, synthetics = 1300f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy;
				shipModule.Weapon.shotInterval = 0.75f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 35;
				break;
				case 306184113: //weapon tigerlaser MK1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = Core.TT($"C1-Industrial <color=#{colorBeamEmt}ff>Beam</color> Emitter");
				shipModule.description = Core.TT($"Modern heavy duty industrial beam emitter developed by mining consortium. Its effective energy emission is perfect for construction of space station and deconstruction of compound alloys. Has low production requirements.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 300f, metals = 1000f, synthetics = 1500f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 5f;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 40;
				break;
				case 306184114: //weapon tigerlaser MK2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = Core.TT($"C2-Industrial <color=#{colorBeamEmt}ff>Beam</color> Emitter");
				shipModule.description = Core.TT($"Modern heavy duty industrial beam emitter developed by mining consortium. Its effective energy emission is perfect for construction of space station and deconstruction of compound alloys. Upgraded with second emitter.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 400f, metals = 1500f, synthetics = 2000f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 5f;
				shipModule.Weapon.shotInterval = 0.45f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 50;
				break;
				case 1860805838: //weapon powerbeam-MK1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = Core.TT($"Light Cutter <color=#{colorBeamEmt}ff>Beam</color> Emitter");
				shipModule.description = Core.TT($"Modern combat beam emitter developed by Terran Federation for military purposes. Very effective against starship hulls, energy shields and internal modules alike. Has state-of-art recharging mechanism. Favored by many military organization.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 375f, metals = 1200f, synthetics = 1800f, exotics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.65f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 10f;
				shipModule.Weapon.shotInterval = 0.55f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 40;
				break;
				case 1457521311: //weapon powerbeam-MK2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = Core.TT($"Medium Cutter <color=#{colorBeamEmt}ff>Beam</color> Emitter");
				shipModule.description = Core.TT($"Modern combat beam emitter developed by Terran Federation for military purposes. Very effective against starship hulls, energy shields and internal modules alike. Has state-of-art recharging mechanism. Upgraded with additional emitter.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 450f, metals = 1800f, synthetics = 2400f, exotics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.65f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 10f;
				shipModule.Weapon.shotInterval = 0.45f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 9;
				shipModule_maxHealth = 50;
				break;
				case 876121604: //weapon powerbeam-MK3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = Core.TT($"Heavy Cutter <color=#{colorBeamEmt}ff>Beam</color> Emitter");
				shipModule.description = Core.TT($"Modern combat beam emitter developed by Terran Federation for military purposes. Very effective against starship hulls, energy shields and internal modules alike. Has state-of-art recharging mechanism. Upgraded with two additional emitters.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 600f, metals = 2400f, synthetics = 3000f, exotics = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.65f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 12;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 10f;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 60;
				break;
				case 30426038: //weapon spideraa triplelaser
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = Core.TT($"Triple-Pulse <color=#{colorBeamEmt}ff>Beam</color> Emitter");
				shipModule.description = Core.TT($"Heavy and accurate triple-joined beam emitter that utilized repulsor technology to concentrate energy in desired direction. Designed by unknown party even to this day. Has state-of-art targeting unit and provides very powerful damage output.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 2500f, synthetics = 3500f, exotics = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 16;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 5f;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 50;
				break;
				case 1999515951: //weapon spideraa quadlaser
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = Core.TT($"Quadro-Pulse <color=#{colorBeamEmt}ff>Beam</color> Emitter");
				shipModule.description = Core.TT($"Heavy and accurate quadro-joined beam emitter that utilized repulsor technology to concentrate energy in desired direction. Designed by unknown party even to this day. Has state-of-art targeting unit and provides very powerful damage output.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 3000f, synthetics = 4000f, exotics = 10f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 14;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 9;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 5f;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 4;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 15;
				shipModule_maxHealth = 60;
				break;
				case 848686115: //weapon insectoid fast laser
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = Core.TT($"Rapid Effector <color=#{colorBeamEmt}ff>Beam</color> Emitter");
				shipModule.description = Core.TT($"Advanced beam weapon with rapid fire capabilities. Developed by Insectoid Alliance engineers. Unique design allows single emitter multiple times in succession to empty all capacitors before entering cooldown mode. Doubles as emergency bunker.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 3500f, synthetics = 4500f, exotics = 10f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 10f;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 6;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 15;
				shipModule_maxHealth = 80;
				break;
				case 849984806: //weapon Insectoid slowlaser
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Beamer].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.6f);
				shipModule.displayName = Core.TT($"Ultra-Effector <color=#{colorBeamEmt}ff>Beam</color> Emitter");
				shipModule.description = Core.TT($"Advanced beam weapon with ultra focusing capabilities. Developed by Insectoid Alliance engineers. Unique design allows emitter to focus all energy until it completely bypasses alloy reflection threshold, thus damaging starship regardless of its deflection capabilities.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 3000f, synthetics = 5000f, exotics = 10f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 35;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 25;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 5;
				shipModule.Weapon.reloadInterval = reloadBeamEnergy - 10f;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 20;
				shipModule_maxHealth = 60;
				break;
				case 981179656: //weapon DIY raygun orange
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.2f);
				shipModule.displayName = Core.TT($"Thermal Wave <color=#{colorHeatRay}ff>Heat Ray</color> Projector");
				shipModule.description = Core.TT($"Basic heat ray weapon that was designed by Black Market specialists for mass production and distribution. Has questionable quality, but still melts hulls and sets interiors of unshielded ships on fire like fireworks during Christmas.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 1000f, synthetics = 500f, exotics = 6f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamHeatRay + 5f;
				shipModule.Weapon.shotInterval = 0.90f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 15;
				break;
				case 414020778: //weapon babylaser 1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.2f);
				shipModule.displayName = Core.TT($"LR1-Skyfire <color=#{colorHeatRay}ff>Heat Ray</color> Projector");
				shipModule.description = Core.TT($"Partially organic heat ray weapon that uses fuel as stable catalyst and specialized crystalline conduit that gives heat ray blue tint. Not so effective against armored compartments per se, but very good at settings everything aflame.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 300f, metals = 1500f, synthetics = 750f, exotics = 7f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamHeatRay;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 20;
				break;
				case 995420485: //weapon babylaser 2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.2f);
				shipModule.displayName = Core.TT($"LR2-Skyfire <color=#{colorHeatRay}ff>Heat Ray</color> Projector");
				shipModule.description = Core.TT($"Partially organic heat ray weapon that uses fuel as stable catalyst and specialized crystalline conduit that gives heat ray blue tint. Not so effective against armored compartments per se, but very good at settings everything aflame. Has dual emission channel.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 450f, metals = 2000f, synthetics = 1000f, exotics = 8f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamHeatRay;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 25;
				break;
				case 1576820192: //weapon babylaser 3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.2f);
				shipModule.displayName = Core.TT($"LR3-Skyfire <color=#{colorHeatRay}ff>Heat Ray</color> Projector");
				shipModule.description = Core.TT($"Partially organic heat ray weapon that uses fuel as stable catalyst and specialized crystalline conduit that gives heat ray blue tint. Not so effective against armored compartments per se, but very good at settings everything aflame. Has triple emission channel.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 600f, metals = 2500f, synthetics = 1250f, exotics = 9f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 6;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamHeatRay;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 13;
				shipModule_maxHealth = 30;
				break;
				case 1307272377: //weapon Heatray emitter
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.2f);
				shipModule.displayName = Core.TT($"Imperial Fire <color=#{colorHeatRay}ff>Heat Ray</color> Projector");
				shipModule.description = Core.TT($"Standard heat ray weapon that uses fuel as stable catalyst. To surprise of all sentient beings in the galaxy was first designed by Rat Empire engineers, when Rat Empire generals concluded that their current energy weapons doesn't pacify enemies fast enough.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 3000f, synthetics = 1500f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 4;
				shipModule.Weapon.reloadInterval = reloadBeamHeatRay - 5f;
				shipModule.Weapon.shotInterval = 0.75f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 45;
				break;
				case 728051246: //weapon Squid beamer heatray
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.2f);
				shipModule.displayName = Core.TT($"Overcharged <color=#{colorHeatRay}ff>Heat Ray</color> Projector");
				shipModule.description = Core.TT($"Improvedheat ray weapon that uses fuel as stable catalyst. Designed by Black Market specialists per special request. Probably somebody decided that existing methods of killing with fire are not intense enough. Delivers serenity and warmth to unruly enemy in effective manner.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 4500f, synthetics = 3250f, exotics = 14f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.35f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 9;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 6;
				shipModule.Weapon.reloadInterval = reloadBeamHeatRay;
				shipModule.Weapon.shotInterval = 0.60f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 35;
				break;
				case 200034057: //weapon heavy energy ray
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.2f);
				shipModule.displayName = Core.TT($"Cyg-Synthian <color=#{colorHeatRay}ff>Heat Ray</color> Projector");
				shipModule.description = Core.TT($"Experimental heat ray weapon that uses fuel as stable catalyst. Designed by skilled, but eccentric engineer that likes toxic colors, overcharged capacitors and durable focusing lens. But even this flamboyant design can't defy deadly efficiency of this heat ray projector.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1100f, metals = 5250f, synthetics = 3500f, exotics = 25f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 4;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 9;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 6;
				shipModule.Weapon.reloadInterval = reloadBeamHeatRay;
				shipModule.Weapon.shotInterval = 0.60f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 11;
				shipModule_maxHealth = 45;
				break;
				case 1322541741: //weapon Heatray emitter x red
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.HeatRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.2f);
				shipModule.displayName = Core.TT($"Hellfire Inferno <color=#{colorHeatRay}ff>Heat Ray</color> Projector");
				shipModule.description = Core.TT($"Advanced heat ray weapon that uses fuel as stable catalyst. A rare case of weapon that Commercial Consortium can't put under copyright clause, because it was based on Rat Empire designs, which by default are always unofficially open source for the rest of the galaxy.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 6000f, synthetics = 4000f, exotics = 40f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { fuel = 6f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 3.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 5;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 11;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 8;
				shipModule.Weapon.reloadInterval = reloadBeamHeatRay;
				shipModule.Weapon.shotInterval = 0.45f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 60;
				break;
				case 1386212334: //weapon DIY raygun blue
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = Core.TT($"Charged Wave <color=#{colorEnergyRay}ff>Energy</color> Disruptor");
				shipModule.description = Core.TT($"Basic energy disruption weapon that was designed by Black Market specialists for mass production and distribution. Has questionable quality, but still fries any starship circuits and shocks crew to extent of lighting them like holiday lights on Christmas tree.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 150f, metals = 400f, synthetics = 700f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 15;
				break;
				case 708268486: //weapon DIY EMP
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = Core.TT($"Shield Breaker <color=#{colorEnergyRay}ff>Energy</color> Disruptor");
				shipModule.description = Core.TT($"Basic energy disruption weapon designed by unknown party, probably by Scrappers or Slavers. Uses specialized synthetic compound to charge capacitors for proper electromagnetic discharge. On impact, emitted beam discharges intense electromagnetic impulse in the targeted area.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 600f, synthetics = 1000f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 25;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.85f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 18;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 5f;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 20;
				break;
				case 1249253086: //weapon dual EMP
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = Core.TT($"Dual Breaker <color=#{colorEnergyRay}ff>Energy</color> Disruptor");
				shipModule.description = Core.TT($"Standard energy disruption weapon designed by Terran Federation for military purposes. Uses advanced internal components such isolated high-capacity overcharged coils to produce greater electromagnetic effect and over greater area at point of impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 400f, metals = 900f, synthetics = 1500f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.10f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 18;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 5f;
				shipModule.Weapon.shotInterval = 0.45f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 25;
				break;
				case 1403294598: //weapon DIY exotics EMP sniper
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = Core.TT($"Force Breaker <color=#{colorEnergyRay}ff>Energy</color> Disruptor");
				shipModule.description = Core.TT($"Improved energy disruption weapon designed by unknown party, probably by Scrappers or Slavers. Uses specialized synthetic compound to charge capacitors for proper electromagnetic discharge. On impact, emitted beam discharges intense electromagnetic impulse in the targeted area.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 1200f, synthetics = 1800f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 45;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 2;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 5;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 5f;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 11;
				shipModule_maxHealth = 25;
				break;
				case 2067779357: //weapon Insectoid shield disruptor
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = Core.TT($"Shock-Effector <color=#{colorEnergyRay}ff>Energy</color> Disruptor");
				shipModule.description = Core.TT($"Advanced energy disruption weapon with three emitters designed by Insectoid Alliance engineers. Uses capacitors with advanced charge compression capabilities, which results in greater electromagnetic discharge impulse then in other energy disruption weapon.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 650f, metals = 1600f, synthetics = 2400f, exotics = 6f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 35;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.35f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 17;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 5f;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 30;
				break;
				case 1411264531: //weapon spideraa disruptor
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = Core.TT($"White Scream <color=#{colorEnergyRay}ff>Energy</color> Disruptor");
				shipModule.description = Core.TT($"Advanced energy disruption weapon with three emitters designed by unknown party. Uses hardly understood repulsor technology that forces electrons to rich critical mass, when emitted as energy stream from this energy disruption weapon, which results in greater EMP effect.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 800f, metals = 2000f, synthetics = 3000f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 35;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 20;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 5f;
				shipModule.Weapon.shotInterval = 0.35f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 19;
				shipModule.powerConsumed = 13;
				shipModule_maxHealth = 35;
				break;
				case 1535460222: //weapon Squid beamer EMP
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = Core.TT($"Warped Light <color=#{colorEnergyRay}ff>Energy</color> Disruptor");
				shipModule.description = Core.TT($"Highly advanced energy disruption weapon with single powerful emitter designed by Black Market specialists. Uses immaterium energy to empower high volume capacitors with unstable energy that allow emitted beam to release extremely strong electromagnetic impulse on impact.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 2500f, synthetics = 3500f, exotics = 14f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 45;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 70;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 8;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 7;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 10f;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 14;
				shipModule_maxHealth = 40;
				break;
				case 1317545673: //weapon rare warp shield breaker EMP
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Disruptor].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 3.4f);
				shipModule.displayName = Core.TT($"Singularity <color=#{colorEnergyRay}ff>Energy</color> Disruptor");
				shipModule.description = Core.TT($"Highly advanced energy disruption weapon with single powerful emitter. Original designer is unknown, but nephrite core of the weapon has markings that decoded as \"Chmmr\" by our AI, whatever it could mean. On emitted beam impact releases extremely powerful electromagnetic impulse.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 3500f, synthetics = 4500f, exotics = 20f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { synthetics = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Low;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 60;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.75f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 80;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 3;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 9;
				shipModule.Weapon.reloadInterval = reloadBeamDisruptor - 10f;
				shipModule.Weapon.shotInterval = 0.65f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 15;
				shipModule_maxHealth = 50;
				break;
				case 144623758: //weapon DIY raygun
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2, 3);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.2f);
				shipModule.displayName = Core.TT($"Impulse Wave <color=#{colorRadAccel}ff>Radiation</color> Accelerator");
				shipModule.description = Core.TT($"Basic radiation acceleration weapon that was designed by Black Market specialists for mass production and distribution. Has questionable quality, but still guarantees that every enemy crewmember that was hit by it will end up with severe health issues.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 300f, metals = 1200f, synthetics = 600f, exotics = 3f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.25f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 5;
				shipModule.Weapon.reloadInterval = reloadBeamRadiator + 10;
				shipModule.Weapon.shotInterval = 1.10f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 15;
				break;
				case 176876935: //weapon bigbeamer1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.2f);
				shipModule.displayName = Core.TT($"Uranium-235 <color=#{colorRadAccel}ff>Radiation</color> Accelerator");
				shipModule.description = Core.TT($"Improved radiation acceleration weapon that was designed by Black Market specialists. Has decent anti-personnel damage output and improved recharging mechanism. Quite cheap in production, but requires quite expensive maintenance to sustain integrity.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 450f, metals = 1600f, synthetics = 900f, exotics = 5f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 8f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.35f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 7;
				shipModule.Weapon.reloadInterval = reloadBeamRadiator + 5f;
				shipModule.Weapon.shotInterval = 0.90f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 7;
				shipModule_maxHealth = 20;
				break;
				case 176876934: //weapon bigbeamer2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.2f);
				shipModule.displayName = Core.TT($"Plutonium-239 <color=#{colorRadAccel}ff>Radiation</color> Accelerator");
				shipModule.description = Core.TT($"Improved radiation acceleration weapon that was designed by Black Market specialists. Has decent anti-personnel damage output and improved recharging mechanism. Upgraded with neutron reflection focusing mirrors that improve efficiency.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 600f, metals = 2000f, synthetics = 1300f, exotics = 7f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 12f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.45f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 9;
				shipModule.Weapon.reloadInterval = reloadBeamRadiator;
				shipModule.Weapon.shotInterval = 0.90f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 9;
				shipModule_maxHealth = 25;
				break;
				case 176876933: //weapon bigbeamer3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.2f);
				shipModule.displayName = Core.TT($"Isotope-244 <color=#{colorRadAccel}ff>Radiation</color> Accelerator");
				shipModule.description = Core.TT($"Improved radiation acceleration weapon that was designed by Black Market specialists. Has decent anti-personnel damage output and improved recharging mechanism. Uses experimental isotope to generate extremely dense radiation stream.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 750f, metals = 3000f, synthetics = 1600f, exotics = 9f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 16f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.55f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 12;
				shipModule.Weapon.reloadInterval = reloadBeamRadiator - 5f;
				shipModule.Weapon.shotInterval = 0.90f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 17;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 30;
				break;
				case 629170598: //weapon black energy laser x2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.2f);
				shipModule.displayName = Core.TT($"Myrmidon <color=#{colorRadAccel}ff>Radiation</color> Accelerator");
				shipModule.description = Core.TT($"Dual radiation acceleration weapon that was designed by unknown party. Compared to standard radiation accelerators, has reduced output and area of effect, which are compensated by multiple radiation emission chambers and neutron reflectors.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 825f, metals = 4000f, synthetics = 2250f, exotics = 15f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 18f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.40f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 7;
				shipModule.Weapon.reloadInterval = reloadBeamRadiator + 5;
				shipModule.Weapon.shotInterval = 0.60f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 14;
				shipModule_maxHealth = 35;
				break;
				case 599402385: //weapon Florallaser
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.2f);
				shipModule.displayName = Core.TT($"Biochemical <color=#{colorRadAccel}ff>Radiation</color> Accelerator");
				shipModule.description = Core.TT($"Radiation acceleration weapon of organic origin that converts organic elements into stable stream of neutrons in order to produce ray of contagious energy. Probably was developed by very thrifty individuals that wanted to conserve resources as much as possible.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 900f, metals = 1000f, synthetics = 1000f, exotics = 20f, organics = 6000f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 20f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.70f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 15;
				shipModule.Weapon.reloadInterval = reloadBeamRadiator - 10;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 5;
				shipModule_maxHealth = 45;
				break;
				case 1210570305: //weapon black energy laser x3
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 7, 8, 9);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.2f);
				shipModule.displayName = Core.TT($"Taenarus <color=#{colorRadAccel}ff>Radiation</color> Accelerator");
				shipModule.description = Core.TT($"Triple radiation acceleration weapon that was designed by unknown party. Compared to standard radiation accelerators, has reduced output and area of effect, which are compensated by multiple radiation emission chambers and neutron reflectors.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1125f, metals = 5250f, synthetics = 3000f, exotics = 25f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 24f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.60f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 6;
				shipModule.Weapon.reloadInterval = reloadBeamRadiator + 5;
				shipModule.Weapon.shotInterval = 0.40f;
				shipModule.Weapon.magazineSize = 3;
				shipModule.Weapon.accuracy = 16;
				shipModule.powerConsumed = 18;
				shipModule_maxHealth = 40;
				break;
				case 1238435842: //weapon BFGx9 for bluestar
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.Radiator].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.2f);
				shipModule.displayName = Core.TT($"BFG9000 Plus <color=#{colorRadAccel}ff>Radiation</color> Accelerator");
				shipModule.description = Core.TT($"Exceptional radiation acceleration weapon that converts destabilized isotopes into focused stream of extremely radioactive argent energy. Looks like design of human origin, but at the same time not. Has great damage output, but also great requirements.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 6000f, synthetics = 3500f, exotics = 30f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { organics = 30f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.None;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 0;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 1;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 20;
				shipModule.Weapon.reloadInterval = reloadBeamRadiator - 10f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 18;
				shipModule.powerConsumed = 20;
				shipModule_maxHealth = 70;
				break;
				case 2075523594: //weapon DIY exoticslaser
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 1, 2);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = Core.TT($"Chromatic Flare <color=#{colorExoticRay}ff>Particle</color> Disintegrator");
				shipModule.description = Core.TT($"Basic exotic ray weapon that uses destabilized exotic matter to produce ray of destructive energy. Was designed by Black Market specialists, when exotic elements became more common and available. Very effective, but consumes exotic matter as ammunition.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 150f, metals = 700f, synthetics = 1000f, exotics = 2f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 1f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 10;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay + 5f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 6;
				shipModule_maxHealth = 20;
				break;
				case 1049561624: //weapon DIY exoticslaser dual
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 2, 3, 4);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = Core.TT($"Prismatic Flare <color=#{colorExoticRay}ff>Particle</color> Disintegrator");
				shipModule.description = Core.TT($"Basic exotic ray weapon that uses destabilized exotic matter to produce ray of destructive energy. Was designed by Black Market specialists, when exotic elements became more common and available. Was upgraded with second ray projector for improved damage output.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 250f, metals = 1000f, synthetics = 1400f, exotics = 4f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 15;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 0.90f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 7;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 2;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay + 5f;
				shipModule.Weapon.shotInterval = 0.55f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 20;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 25;
				break;
				case 1356678884: //weapon Squid beamer single
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 3, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = Core.TT($"Focal Deathray <color=#{colorExoticRay}ff>Particle</color> Disintegrator");
				shipModule.description = Core.TT($"Advanced exotic ray weapon that uses destabilized exotic matter with application of uncertain technology to produce ray of destructive energy. Designed by an unknown party that believes in a Greater Good. Has very efficient damage output.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 500f, metals = 1500f, synthetics = 2000f, exotics = 7f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 2f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 25;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 17;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 17;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 17;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 5;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 21;
				shipModule.powerConsumed = 8;
				shipModule_maxHealth = 30;
				break;
				case 1281152896: //weapon Squid beamer double
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = Core.TT($"Dual Deathray <color=#{colorExoticRay}ff>Particle</color> Disintegrator");
				shipModule.description = Core.TT($"Advanced exotic ray weapon that uses destabilized exotic matter with application of uncertain technology to produce ray of destructive energy. Designed by an unknown party that believes in a Greater Good. Upgraded with second ray projector.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 650f, metals = 1800f, synthetics = 2400f, exotics = 10f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 25;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.00f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 11;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 11;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 11;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 3;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay;
				shipModule.Weapon.shotInterval = 0.55f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 21;
				shipModule.powerConsumed = 10;
				shipModule_maxHealth = 40;
				break;
				case 1028495088: //weapon Squid warp ray effector
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 4, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = Core.TT($"Wave-Folding <color=#{colorExoticRay}ff>Particle</color> Disintegrator");
				shipModule.description = Core.TT($"Advanced exotic ray weapon that uses destabilized exotic matter to tear miniature hole in reality and produce ray of destructive immaterium energy. Designed by an unknown party, but contains a lot of pointless \"Chaos Undivided\" scribbles.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 800f, metals = 2400f, synthetics = 3000f, exotics = 14f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 35;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.30f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 27;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 27;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 27;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 8;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 5f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 21;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 35;
				break;
				case 1433969244: //weapon rarelaserblue1
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = Core.TT($"Light Nephrite <color=#{colorExoticRay}ff>Particle</color> Disintegrator");
				shipModule.description = Core.TT($"Highly advanced light exotic ray weapon that uses destabilized exotic matter. Original designer is unknown, but nephrite core of the weapon has markings that decoded as \"Chmmr\" by our AI, whatever it could mean. Very efficient versus everything.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1000f, metals = 3000f, synthetics = 4000f, exotics = 18f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 40;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.10f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 30;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 10;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 5f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 22;
				shipModule.powerConsumed = 12;
				shipModule_maxHealth = 40;
				break;
				case 1433969243: //weapon rarelaserblue2
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 5, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = Core.TT($"Heavy Nephrite <color=#{colorExoticRay}ff>Particle</color> Disintegrator");
				shipModule.description = Core.TT($"Highly advanced heavy exotic ray weapon that uses destabilized exotic matter. Original designer is unknown, but nephrite core of the weapon has markings that decoded as \"Chmmr\" by our AI, whatever it could mean. Has great damage output.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1250f, metals = 3500f, synthetics = 5000f, exotics = 24f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 3f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 45;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.30f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 37;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 37;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 37;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 12;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 5f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 22;
				shipModule.powerConsumed = 14;
				shipModule_maxHealth = 50;
				break;
				case 68261259: //weapon rarelaserblue2 dual
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = Core.TT($"Dual Nephrite <color=#{colorExoticRay}ff>Particle</color> Disintegrator");
				shipModule.description = Core.TT($"Highly advanced heavy exotic ray weapon that uses destabilized exotic matter. Original designer is unknown, but nephrite core of the weapon has markings that decoded as \"Chmmr\" by our AI, whatever it could mean. Upgraded with second ray projector.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1500f, metals = 4500f, synthetics = 5500f, exotics = 30f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 45;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.30f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 21;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 21;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 21;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 7;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 5f;
				shipModule.Weapon.shotInterval = 0.55f;
				shipModule.Weapon.magazineSize = 2;
				shipModule.Weapon.accuracy = 22;
				shipModule.powerConsumed = 16;
				shipModule_maxHealth = 60;
				break;
				case 737829770: //weapon spideraa laser
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 6, 7, 8);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = Core.TT($"Warp Storm <color=#{colorExoticRay}ff>Particle</color> Disintegrator");
				shipModule.description = Core.TT($"Advanced exotic ray weapon that uses destabilized exotic matter under influence of repulsor waves to produce ray of destructive energy. Designed by unknown party with probably evil intentions. Has improved damage output, accuracy and area of effect.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 1750f, metals = 5000f, synthetics = 6500f, exotics = 50f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.30f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 16;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 5f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 22;
				shipModule.powerConsumed = 17;
				shipModule_maxHealth = 50;
				break;
				case 842752468: //weapon rarelasergothic small
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 8, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = Core.TT($"Lo-Gothic Relic <color=#{colorExoticRay}ff>Particle</color> Disintegrator");
				shipModule.description = Core.TT($"Light exotic ray weapon of unknown origin that uses destabilized exotic matter to produce ray of extremely destructive energy. Wasn't designed, but ripped off from something that resembles drifting interstellar gothic cathedral. Has extreme damage output.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 2250f, metals = 6500f, synthetics = 7250f, exotics = 80f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 4f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 65;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 60;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 60;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 60;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 20;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 10f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 22;
				shipModule.powerConsumed = 19;
				shipModule_maxHealth = 50;
				break;
				case 452279033: //weapon rarelasergothic
				if (initItemData) FFU_BE_Defs.SetViableForSectors(shipModule.PrefabId, 9, 10);
				if (!FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Contains(shipModule.PrefabId)) FFU_BE_Defs.weaponTypeIDs[Core.WeaponType.ExoticRay].Add(shipModule.PrefabId);
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 4.0f);
				shipModule.displayName = Core.TT($"Hi-Gothic Relic <color=#{colorExoticRay}ff>Particle</color> Disintegrator");
				shipModule.description = Core.TT($"Heavy exotic ray weapon of unknown origin that uses destabilized exotic matter to produce ray of extremely destructive energy. Wasn't designed, but ripped off from something that resembles drifting interstellar gothic cathedral. Has immense damage output.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 3000f, metals = 8000f, synthetics = 9000f, exotics = 120f };
				shipModule.Weapon.resourcesPerShot = new ResourceValueGroup { exotics = 5f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.Default;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 75;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 1.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 75;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 75;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 75;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 25;
				shipModule.Weapon.reloadInterval = reloadBeamExoticRay - 10f;
				shipModule.Weapon.shotInterval = 0.85f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 22;
				shipModule.powerConsumed = 20;
				shipModule_maxHealth = 60;
				break;
				case 1934368951: //weapon EMP perm DLC
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 10.0f);
				shipModule.displayName = Core.TT($"Solar Flare Oscillator");
				shipModule.description = Core.TT($"A powerful built-in exotic weapon that generates miniature solar flares overflowing with raw energy that contained and guided by quantum intangibility fields. Each activation consumes huge amount of exotics, beside huge energy requirements and very long recharge times.");
				shipModule.craftCost = new ResourceValueGroup { organics = 24000f, fuel = 3750f, metals = 10000f, synthetics = 19000f, exotics = 500f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 120;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 6.0f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 750;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 125;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 250;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 75;
				shipModule.Weapon.reloadInterval = 180f;
				shipModule.Weapon.shotInterval = 3.0f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 60;
				shipModule_maxHealth = 350;
				break;
				case 1801315413: //bossweapon insectoid ship
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 5.0f);
				shipModule.displayName = Core.TT($"Sub-Atomic Disintegrator");
				shipModule.description = Core.TT($"Power readings are off the scale. It morphs in unexpected ways before shooting.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 4250f, metals = 15000f, synthetics = 19000f, exotics = 750f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = false;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleOverloadSeconds = 50;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).damageAreaRadius = 2.50f;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shieldDmg = 500;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).moduleDmg = 100;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).shipDmg = 200;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).doorDmg = 50;
				shipModule.Weapon.reloadInterval = 90f;
				shipModule.Weapon.shotInterval = 1.75f;
				shipModule.Weapon.magazineSize = 1;
				shipModule.Weapon.accuracy = 25;
				shipModule.powerConsumed = 20;
				shipModule_maxHealth = 150;
				break;
				case 1088715096: //bossweapon weirdaxer
				if (!FFU_BE_Defs.moduleEmissionPrefabs.ContainsKey(shipModule.PrefabId)) FFU_BE_Defs.moduleEmissionPrefabs.Add(shipModule.PrefabId, 8.0f);
				shipModule.displayName = Core.TT($"Planet Killer Annihilator");
				shipModule.description = Core.TT($"Power readings are off the scale. It morphs in unexpected ways before shooting.");
				shipModule.craftCost = new ResourceValueGroup { fuel = 5000f, metals = 15000f, synthetics = 19000f, exotics = 1000f };
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).ignoresShield = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).neverDeflect = true;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).crewDmgLevel = ShootAtDamageDealer.CrewDmgLevel.High;
				shipModule.Weapon.ProjectileOrBeamPrefab.GetDamage(shipModule.Weapon).fireChanceLevel = ShootAtDamageDealer.FireChanceLevel.High;
				shipModule.Weapon.reloadInterval = 300f;
				shipModule.maxHealthAdd = 5000;
				shipModule_maxHealth = 5000;
				break;
				default:
				if (initItemData) Debug.LogWarning($"[NEW WEAPON] {FFU_BE_Mod_Information.GetSelectedModuleExactData(shipModule, false, true, false, false, false)}");
				shipModule.displayName = $"(WEAPON) {shipModule.name}";
				break;
			}
			shipModule.asteroidDeflectionPercentAdd = 0;
			shipModule.Weapon.disableAudio = WeaponModule.DisableAudio.None;
			AccessTools.FieldRefAccess<ShipModule, int>(shipModule, "maxHealth") = shipModule_maxHealth;
			if ((shipModule.Weapon.ProjectileOrBeamPrefab as Projectile) != null) {
				AccessTools.FieldRefAccess<Projectile, int>(shipModule.Weapon.ProjectileOrBeamPrefab as Projectile, "pointDefPriority") = shipModule_Weapon_ProjectileOrBeamPrefab_pointDefPriority;
				AccessTools.FieldRefAccess<ShootAtDamageDealer, int>(shipModule.Weapon.ProjectileOrBeamPrefab, "maxHealth") = shipModule.Weapon.overrideProjectileHealth;
			}
			FFU_BE_Mod_Modules.UpdateCommonStats(shipModule);
		}
		public class ProcessDLC {
			public static void ApplySectorViablility(int moduleId) {
				switch (moduleId) {
					case 790917823: //weapon Floral cannon
					if (FFU_BE_Defs.flagDLC_OldEnm) FFU_BE_Defs.SetViableForSectors(moduleId, 8, 9, 10);
					else FFU_BE_Defs.SetViableForSectors(moduleId, 6, 7, 8, 9, 10);
					break;
					case 1983239915: //weapon exoticscannon1
					if (FFU_BE_Defs.flagDLC_OldEnm) FFU_BE_Defs.SetViableForSectors(moduleId, 8, 9, 10);
					else FFU_BE_Defs.SetViableForSectors(moduleId, 7, 8, 9, 10);
					break;
				}
			}
			public static int GetProjectileHealth(int moduleId) {
				switch (moduleId) {
					case 1983239915: //weapon exoticscannon1
					if (FFU_BE_Defs.flagDLC_OldEnm) return 25;
					else return 20;
					default: return 5;
				}
			}
		}
	}
}